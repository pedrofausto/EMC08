<'
// -----------------------------------------------------------------------------
// CI Brasil - CT2 Campinas
// Phase II Project Project
// EMC08 - 8 Bit Microcontroller for Automotive Engine Application
// -----------------------------------------------------------------------------
// File Name : creg_bfm_i_h.e
// Module Name : Core - Special Registers Controller
// Author: Lizbeth Paredes Aguilar
// E-mail: liz.paredes@gmail.com
// -----------------------------------------------------------------------------
// Review(s) : 
// -------------------------------------------------------------------
// Release History
// Version  Date        Description
// 1.0      01/09/2010  Initial Version
// 1.1      05/09/2010  
// 1.2      07/09/2010  
// -------------------------------------------------------------------
// Keywords: creg - registers controller, phy - physical, bfm - bus functional mode
// -----------------------------------------------------------------------------
// Purpose: This unit will drive the interface signals of the router DUT. 
// It will get an instance of a packet it is to drive from the sequence driver
// -----------------------------------------------------------------------------
// Parameters
// Parameter name: Range: Description: Default: Units
//
// -----------------------------------------------------------------------------
// Reuse Issues
// External Pins Required: none
// Monitors Required: none
// Drivers Required: none
// Local Functions: drive_bus(), get_pkt(), its_done(), send_pkt()
// Include Files: none
// Other:
// -----------------------------------------------------------------------------
// Features Tested: none
// -----------------------------------------------------------------------------
// Detailed Test Description: none
// -----------------------------------------------------------------------------

unit creg_bfm_i_u like creg_phy_u {
   // connect the main clock to the bfm through the event clock_e
   event clock_e;            
  
   // function to driver the inputs to the DUT
   drive_bus() @clock_e is {};

   // get the inputs (packet) generated by the sequence generator
   get_pkt(): creg_signal_type @clock_e is {};

   // method to advise that the send task was done
   its_done() is {};

   // send the signals (packet) to the DUT
   send_pkt(in_pkt: creg_signal_type) @clock_e is{};
  
   // initial reset event
   initial_reset() @clock_e is {};
  
   run() is also {
      // here, start the drive_bus() TCM declared above that will run forever and the initial reset
      out("in run");
      start drive_bus();
   };
};

'>