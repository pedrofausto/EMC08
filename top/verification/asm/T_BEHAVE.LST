
ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Macro Assembler   A S E M - 5 1   V 1.3
       =====================================================



	Source File:	C:\DOCUME~1\p\MEUSDO~1\MATLAB\t_behave.asm
	Object File:	C:\DOCUME~1\p\MEUSDO~1\MATLAB\t_behave.hex
	List File:	C:\DOCUME~1\p\MEUSDO~1\MATLAB\t_behave.lst



 Line  I  Addr  Code            Source

    1:		N      0000	ORG 0000H ; First ADDR
    2:	  0000	02 00 53	JMP INITIAL
    3:		N      0003	ORG 0003H ; Interrupt IE0
    4:	  0003	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
    5:	  0006	32		RETI
    6:		N      000B	ORG 000BH ; Interrupt TF0
    7:	  000B	02 00 3B	JMP LABEL_TF0
    8:		N      0013	ORG 0013H ; Interrupt IE1
    9:	  0013	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
   10:	  0016	32		RETI
   11:		N      001B	ORG 001BH ; Interrupt TF1
   12:	  001B	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
   13:	  001E	32		RETI
   14:		N      0023	ORG 0023H ; Interrupt TF2
   15:	  0023	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
   16:	  0026	D2 00		SETB 00h ; set a bit in RAM to go out loop in program
   17:	  0028	32		RETI
   18:		N      002B	ORG 002BH ; Interrupt RI_TI
   19:	  002B	02 00 4A	JMP LABEL_RI_TI
   20:		N      0033	ORG 0033H ; Interrupt TXRX
   21:	  0033	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
   22:	  0036	32		RETI
   23:		N      003B	ORG 003BH ; ADDR after interrupt space
   24:	  003B			LABEL_TF0:
   25:	  003B	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
   26:				; time to verification stimulates INT1 input signal (as 2 cyles of CM)
   27:	  003E	00		NOP
   28:	  003F	00		NOP
   29:	  0040	75 90 D0	MOV P1, #0D0H ; P1 random, time to interrupt to be processed
   30:	  0043	75 90 FE	MOV P1, #0FEH ; inform JMP BACK from TF1 OK (verify it)
   31:	  0046	75 90 D0	MOV P1, #0D0H ; P1 random
   32:	  0049	32		RETI
   33:	  004A			LABEL_RI_TI:
   34:	  004A	75 90 FF	MOV P1, #0FFH ; inform Interrupt OK (verify it)
   35:	  004D	B2 00		CPL 00h ; set a bit in RAM to go out loop in program
   36:	  004F	75 98 90	MOV SCON, #090H ; clear serial flags
   37:	  0052	32		RETI
   38:	  0053	75 C8 FF	INITIAL: MOV 0C8H, #0FFH ; Setting P1EN - output
   39:	  0056	75 87 80	MOV PCON, #080H ; SMOD = 1
   40:	  0059	75 98 80	MOV SCON, #080H ; Serial mode 2, and RI TI flags cleared
   41:	  005C	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
   42:	  005F	75 90 F6	MOV P1, #0F6H ; data_1 to transmit
   43:	  0062	75 90 28	MOV P1, #028H ; data_2 to receive

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   44:	  0065	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
   45:	  0068	D2 9C		SETB 09CH ; REN active
   46:	  006A	C2 00		CLR 00h ; clear a bit in RAM
   47:	  006C	75 99 F6	MOV SBUF, #0F6H ; start transmition.
   48:				; during transmition, verification must stimulate reception, with a start bit and then data_2
   49:	  006F	00		LABEL_TI_2: NOP ; loop until end of transmition
   50:	  0070	30 00 FC	JNB 00h, LABEL_TI_2
   51:	  0073	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
   52:	  0076	00		LABEL_RI_2: NOP ; loop until end of reception
   53:	  0077	20 00 FC	JB 00h, LABEL_RI_2
   54:	  007A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
   55:	  007D	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
   56:	  0080	75 98 80	MOV SCON, #080H ; clear flags and disable REN
   57:	  0083	75 A8 00	MOV IE, #000H ; All interrupts disabled
   58:
   59:
   60:
   61:
   62:
   63:
   64:
   65:
   66:
   67:
   68:
   69:
   70:
   71:
   72:
   73:
   74:
   75:
   76:
   77:
   78:
   79:
   80:
   81:	  0086	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
   82:	  0089	75 90 EA	MOV P1, #0EAH ; data_1 to transmit
   83:	  008C	75 90 CA	MOV P1, #0CAH ; data_2 to receive
   84:	  008F	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
   85:	  0092	D2 9C		SETB 09CH ; REN active
   86:	  0094	C2 00		CLR 00h ; clear a bit in RAM
   87:	  0096	75 99 EA	MOV SBUF, #0EAH ; start transmition.
   88:				; during transmition, verification must stimulate reception, with a start bit and then data_2
   89:	  0099	00		LABEL_TI_3: NOP ; loop until end of transmition
   90:	  009A	30 00 FC	JNB 00h, LABEL_TI_3
   91:	  009D	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
   92:	  00A0	00		LABEL_RI_3: NOP ; loop until end of reception
   93:	  00A1	20 00 FC	JB 00h, LABEL_RI_3
   94:	  00A4	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
   95:	  00A7	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
   96:	  00AA	75 98 80	MOV SCON, #080H ; clear flags and disable REN
   97:	  00AD	75 A8 00	MOV IE, #000H ; All interrupts disabled
   98:
   99:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

  100:
  101:
  102:
  103:
  104:
  105:
  106:
  107:
  108:
  109:
  110:
  111:
  112:
  113:
  114:
  115:
  116:
  117:
  118:
  119:
  120:
  121:	  00B0	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
  122:	  00B3	75 90 C1	MOV P1, #0C1H ; data_1 to transmit
  123:	  00B6	75 90 BD	MOV P1, #0BDH ; data_2 to receive
  124:	  00B9	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  125:	  00BC	D2 9C		SETB 09CH ; REN active
  126:	  00BE	C2 00		CLR 00h ; clear a bit in RAM
  127:	  00C0	75 99 C1	MOV SBUF, #0C1H ; start transmition.
  128:				; during transmition, verification must stimulate reception, with a start bit and then data_2
  129:	  00C3	00		LABEL_TI_4: NOP ; loop until end of transmition
  130:	  00C4	30 00 FC	JNB 00h, LABEL_TI_4
  131:	  00C7	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
  132:	  00CA	00		LABEL_RI_4: NOP ; loop until end of reception
  133:	  00CB	20 00 FC	JB 00h, LABEL_RI_4
  134:	  00CE	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
  135:	  00D1	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
  136:	  00D4	75 98 80	MOV SCON, #080H ; clear flags and disable REN
  137:	  00D7	75 A8 00	MOV IE, #000H ; All interrupts disabled
  138:
  139:
  140:
  141:
  142:
  143:
  144:
  145:
  146:
  147:
  148:
  149:
  150:
  151:
  152:
  153:
  154:
  155:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  156:
  157:
  158:
  159:
  160:
  161:	  00DA	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
  162:	  00DD	75 90 D2	MOV P1, #0D2H
  163:	  00E0	75 90 B1	MOV P1, #0B1H
  164:	  00E3	75 90 51	MOV P1, #051H
  165:				; PORT 0 VERIFICATION
  166:	  00E6	75 C0 D2	MOV 0C0H, #0D2H ; P0EN <- data_1
  167:	  00E9	75 80 B1	MOV P0, #0B1H ; verify if p0_a == data_2
  168:				; verification: stimulate p0_y <- data_3
  169:				; PORT 1 VERIFICATION
  170:	  00EC	75 C8 51	MOV 0C8H, #051H ; P1EN <- data_3
  171:	  00EF	75 90 B1	MOV P1, #0B1H ; verify if p1_a == data_2
  172:				; verification: stimulate p1_y <- data_1
  173:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
  174:				; PORT 2 VERIFICATION
  175:	  00F2	75 E8 D2	MOV 0E8H, #0D2H ; P2EN <- data_1
  176:	  00F5	75 A0 51	MOV P2, #051H ; verify if p2_a == data_3
  177:				; verification: stimulate p2_y <- data_2
  178:				; PORT 3 VERIFICATION
  179:	  00F8	75 F8 B1	MOV 0F8H, #0B1H ; P0EN <- data_2
  180:	  00FB	75 B0 D2	MOV P3, #0D2H ; verify if p3_a == data_1
  181:				; verification: stimulate p3_y <- data_3
  182:				; PORT 4 VERIFICATION
  183:	  00FE	75 AF 51	MOV 0AFH, #051H ; verify if p4_a == data_3
  184:	  0101	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
  185:	  0104	00		NOP ; synchronization
  186:
  187:
  188:
  189:
  190:
  191:
  192:
  193:
  194:
  195:
  196:
  197:
  198:
  199:
  200:
  201:	  0105	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
  202:	  0108	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  203:	  010B	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  204:	  010E	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
  205:	  0110	00		NOP ; time for interrupt to be processed
  206:	  0111	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  207:	  0114	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
  208:	  0117	75 A8 00	MOV IE, #000H ; All interrupts disabled
  209:
  210:
  211:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  212:
  213:
  214:
  215:
  216:
  217:
  218:
  219:
  220:
  221:
  222:
  223:
  224:
  225:
  226:
  227:
  228:
  229:
  230:
  231:
  232:
  233:
  234:
  235:
  236:
  237:
  238:
  239:
  240:
  241:	  011A	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
  242:	  011D	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  243:	  0120	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  244:	  0123	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
  245:	  0126	00		NOP ; verification must stimulate external interrupt 0
  246:	  0127	00		NOP ; verification must stimulate external interrupt 0
  247:	  0128	00		NOP ; verification must stimulate external interrupt 0
  248:	  0129	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  249:	  012C	00		NOP ; verification must stimulate external interrupt 1
  250:	  012D	00		NOP ; verification must stimulate external interrupt 1
  251:	  012E	00		NOP ; verification must stimulate external interrupt 1
  252:	  012F	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  253:	  0132	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
  254:	  0135	75 A8 00	MOV IE, #000H ; All interrupts disabled
  255:	  0138	75 88 00	MOV TCON, #00H ; reset TCON
  256:
  257:
  258:
  259:
  260:
  261:
  262:
  263:
  264:
  265:
  266:
  267:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  268:
  269:
  270:
  271:
  272:
  273:
  274:
  275:
  276:
  277:
  278:
  279:
  280:
  281:	  013B	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
  282:	  013E	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  283:				; moving FFFFFDh to 24bits Timer 2 counter
  284:	  0141	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
  285:	  0144	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
  286:	  0147	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
  287:	  014A	C2 00		CLR 00h ; clear a bit in RAM
  288:	  014C	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
  289:	  014F	00		LABEL_TF2_8: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
  290:	  0150	30 00 FC	JNB 00h, LABEL_TF2_8
  291:	  0153	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  292:	  0156	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
  293:	  0159	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
  294:	  015C	75 A8 00	MOV IE, #000H ; All interrupts disabled
  295:
  296:
  297:
  298:
  299:
  300:
  301:
  302:
  303:
  304:
  305:
  306:
  307:
  308:
  309:
  310:
  311:
  312:
  313:
  314:
  315:
  316:
  317:
  318:
  319:
  320:
  321:	  015F	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
  322:	  0162	75 90 F5	MOV P1, #0F5H ; data_1 to transmit
  323:	  0165	75 90 8C	MOV P1, #08CH ; data_2 to receive

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  324:	  0168	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  325:	  016B	D2 9C		SETB 09CH ; REN active
  326:	  016D	C2 00		CLR 00h ; clear a bit in RAM
  327:	  016F	75 99 F5	MOV SBUF, #0F5H ; start transmition.
  328:				; during transmition, verification must stimulate reception, with a start bit and then data_2
  329:	  0172	00		LABEL_TI_9: NOP ; loop until end of transmition
  330:	  0173	30 00 FC	JNB 00h, LABEL_TI_9
  331:	  0176	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
  332:	  0179	00		LABEL_RI_9: NOP ; loop until end of reception
  333:	  017A	20 00 FC	JB 00h, LABEL_RI_9
  334:	  017D	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
  335:	  0180	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
  336:	  0183	75 98 80	MOV SCON, #080H ; clear flags and disable REN
  337:	  0186	75 A8 00	MOV IE, #000H ; All interrupts disabled
  338:
  339:
  340:
  341:
  342:
  343:
  344:
  345:
  346:
  347:
  348:
  349:
  350:
  351:
  352:
  353:
  354:
  355:
  356:
  357:
  358:
  359:
  360:
  361:	  0189	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
  362:	  018C	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  363:				; moving FFFFFDh to 24bits Timer 2 counter
  364:	  018F	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
  365:	  0192	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
  366:	  0195	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
  367:	  0198	C2 00		CLR 00h ; clear a bit in RAM
  368:	  019A	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
  369:	  019D	00		LABEL_TF2_10: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
  370:	  019E	30 00 FC	JNB 00h, LABEL_TF2_10
  371:	  01A1	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  372:	  01A4	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
  373:	  01A7	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
  374:	  01AA	75 A8 00	MOV IE, #000H ; All interrupts disabled
  375:
  376:
  377:
  378:
  379:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  380:
  381:
  382:
  383:
  384:
  385:
  386:
  387:
  388:
  389:
  390:
  391:
  392:
  393:
  394:
  395:
  396:
  397:
  398:
  399:
  400:
  401:	  01AD	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
  402:	  01B0	75 90 D4	MOV P1, #0D4H ; data_1 to transmit
  403:	  01B3	75 90 95	MOV P1, #095H ; data_2 to receive
  404:	  01B6	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  405:	  01B9	D2 9C		SETB 09CH ; REN active
  406:	  01BB	C2 00		CLR 00h ; clear a bit in RAM
  407:	  01BD	75 99 D4	MOV SBUF, #0D4H ; start transmition.
  408:				; during transmition, verification must stimulate reception, with a start bit and then data_2
  409:	  01C0	00		LABEL_TI_11: NOP ; loop until end of transmition
  410:	  01C1	30 00 FC	JNB 00h, LABEL_TI_11
  411:	  01C4	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
  412:	  01C7	00		LABEL_RI_11: NOP ; loop until end of reception
  413:	  01C8	20 00 FC	JB 00h, LABEL_RI_11
  414:	  01CB	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
  415:	  01CE	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
  416:	  01D1	75 98 80	MOV SCON, #080H ; clear flags and disable REN
  417:	  01D4	75 A8 00	MOV IE, #000H ; All interrupts disabled
  418:
  419:
  420:
  421:
  422:
  423:
  424:
  425:
  426:
  427:
  428:
  429:
  430:
  431:
  432:
  433:
  434:
  435:

ASEM-51 V1.3                                         Copyright (c) 2002 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  436:
  437:
  438:
  439:
  440:
  441:	  01D7	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
  442:	  01DA	75 90 0E	MOV P1, #0EH
  443:	  01DD	75 90 87	MOV P1, #087H
  444:	  01E0	75 90 C7	MOV P1, #0C7H
  445:				; PORT 0 VERIFICATION
  446:	  01E3	75 C0 0E	MOV 0C0H, #0EH ; P0EN <- data_1
  447:	  01E6	75 80 87	MOV P0, #087H ; verify if p0_a == data_2
  448:				; verification: stimulate p0_y <- data_3
  449:				; PORT 1 VERIFICATION
  450:	  01E9	75 C8 C7	MOV 0C8H, #0C7H ; P1EN <- data_3
  451:	  01EC	75 90 87	MOV P1, #087H ; verify if p1_a == data_2
  452:				; verification: stimulate p1_y <- data_1
  453:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
  454:				; PORT 2 VERIFICATION
  455:	  01EF	75 E8 0E	MOV 0E8H, #0EH ; P2EN <- data_1
  456:	  01F2	75 A0 C7	MOV P2, #0C7H ; verify if p2_a == data_3
  457:				; verification: stimulate p2_y <- data_2
  458:				; PORT 3 VERIFICATION
  459:	  01F5	75 F8 87	MOV 0F8H, #087H ; P0EN <- data_2
  460:	  01F8	75 B0 0E	MOV P3, #0EH ; verify if p3_a == data_1
  461:				; verification: stimulate p3_y <- data_3
  462:				; PORT 4 VERIFICATION
  463:	  01FB	75 AF C7	MOV 0AFH, #0C7H ; verify if p4_a == data_3
  464:	  01FE	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
  465:	  0201	00		NOP ; synchronization
  466:
  467:
  468:
  469:
  470:
  471:
  472:
  473:
  474:
  475:
  476:
  477:
  478:
  479:
  480:
  481:	  0202	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
  482:	  0205	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  483:	  0208	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  484:	  020B	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
  485:	  020D	00		NOP ; time for interrupt to be processed
  486:	  020E	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  487:	  0211	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
  488:	  0214	75 A8 00	MOV IE, #000H ; All interrupts disabled
  489:
  490:
  491:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  492:
  493:
  494:
  495:
  496:
  497:
  498:
  499:
  500:
  501:
  502:
  503:
  504:
  505:
  506:
  507:
  508:
  509:
  510:
  511:
  512:
  513:
  514:
  515:
  516:
  517:
  518:
  519:
  520:
  521:	  0217	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
  522:	  021A	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  523:	  021D	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  524:	  0220	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
  525:	  0222	00		NOP ; time for interrupt to be processed
  526:	  0223	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  527:	  0226	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
  528:	  0229	75 A8 00	MOV IE, #000H ; All interrupts disabled
  529:
  530:
  531:
  532:
  533:
  534:
  535:
  536:
  537:
  538:
  539:
  540:
  541:
  542:
  543:
  544:
  545:
  546:
  547:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  548:
  549:
  550:
  551:
  552:
  553:
  554:
  555:
  556:
  557:
  558:
  559:
  560:
  561:	  022C	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
  562:	  022F	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
  563:	  0232	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts
  564:				; moving FFFFFDh to 24bits Timer 0 counter
  565:	  0235	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
  566:	  0238	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
  567:	  023B	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
  568:				; moving 000002h to 24bits Timer 1 counter
  569:	  023E	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
  570:	  0241	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
  571:	  0244	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
  572:	  0247	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
  573:	  024A	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
  574:	  024D	00		NOP ; time to timer 0 overflow
  575:	  024E	00		NOP ; time to timer 0 overflow
  576:	  024F	00		NOP ; time for interrupt to be processed
  577:	  0250	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  578:	  0253	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
  579:	  0256	75 89 00	MOV TMOD, #00H ; reset TMOD
  580:	  0259	75 88 00	MOV TCON, #00H ; reset TCON
  581:	  025C	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  582:	  025F	75 A8 00	MOV IE, #000H ; All interrupts disabled
  583:
  584:
  585:
  586:
  587:
  588:
  589:
  590:
  591:
  592:
  593:
  594:
  595:
  596:
  597:
  598:
  599:
  600:
  601:	  0262	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
  602:	  0265	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
  603:	  0268	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 12



 Line  I  Addr  Code            Source

  604:				; moving FFFFFDh to 24bits Timer 0 counter
  605:	  026B	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
  606:	  026E	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
  607:	  0271	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
  608:				; moving 000002h to 24bits Timer 1 counter
  609:	  0274	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
  610:	  0277	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
  611:	  027A	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
  612:	  027D	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
  613:	  0280	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
  614:	  0283	00		NOP ; time to timer 0 overflow
  615:	  0284	00		NOP ; time to timer 0 overflow
  616:	  0285	00		NOP ; time for interrupt to be processed
  617:	  0286	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  618:	  0289	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
  619:	  028C	75 89 00	MOV TMOD, #00H ; reset TMOD
  620:	  028F	75 88 00	MOV TCON, #00H ; reset TCON
  621:	  0292	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  622:	  0295	75 A8 00	MOV IE, #000H ; All interrupts disabled
  623:
  624:
  625:
  626:
  627:
  628:
  629:
  630:
  631:
  632:
  633:
  634:
  635:
  636:
  637:
  638:
  639:
  640:
  641:	  0298	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
  642:	  029B	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  643:	  029E	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  644:	  02A1	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
  645:	  02A4	00		NOP ; verification must stimulate external interrupt 0
  646:	  02A5	00		NOP ; verification must stimulate external interrupt 0
  647:	  02A6	00		NOP ; verification must stimulate external interrupt 0
  648:	  02A7	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  649:	  02AA	00		NOP ; verification must stimulate external interrupt 1
  650:	  02AB	00		NOP ; verification must stimulate external interrupt 1
  651:	  02AC	00		NOP ; verification must stimulate external interrupt 1
  652:	  02AD	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  653:	  02B0	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
  654:	  02B3	75 A8 00	MOV IE, #000H ; All interrupts disabled
  655:	  02B6	75 88 00	MOV TCON, #00H ; reset TCON
  656:
  657:
  658:
  659:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 13



 Line  I  Addr  Code            Source

  660:
  661:
  662:
  663:
  664:
  665:
  666:
  667:
  668:
  669:
  670:
  671:
  672:
  673:
  674:
  675:
  676:
  677:
  678:
  679:
  680:
  681:	  02B9	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
  682:	  02BC	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  683:	  02BF	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  684:	  02C2	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
  685:	  02C4	00		NOP ; time for interrupt to be processed
  686:	  02C5	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  687:	  02C8	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
  688:	  02CB	75 A8 00	MOV IE, #000H ; All interrupts disabled
  689:
  690:
  691:
  692:
  693:
  694:
  695:
  696:
  697:
  698:
  699:
  700:
  701:
  702:
  703:
  704:
  705:
  706:
  707:
  708:
  709:
  710:
  711:
  712:
  713:
  714:
  715:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 14



 Line  I  Addr  Code            Source

  716:
  717:
  718:
  719:
  720:
  721:	  02CE	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
  722:	  02D1	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  723:	  02D4	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  724:	  02D7	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
  725:	  02D9	00		NOP ; time for interrupt to be processed
  726:	  02DA	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  727:	  02DD	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
  728:	  02E0	75 A8 00	MOV IE, #000H ; All interrupts disabled
  729:
  730:
  731:
  732:
  733:
  734:
  735:
  736:
  737:
  738:
  739:
  740:
  741:
  742:
  743:
  744:
  745:
  746:
  747:
  748:
  749:
  750:
  751:
  752:
  753:
  754:
  755:
  756:
  757:
  758:
  759:
  760:
  761:	  02E3	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
  762:	  02E6	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  763:	  02E9	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  764:	  02EC	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
  765:	  02EE	00		NOP ; time for interrupt to be processed
  766:	  02EF	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  767:	  02F2	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
  768:	  02F5	75 A8 00	MOV IE, #000H ; All interrupts disabled
  769:
  770:
  771:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 15



 Line  I  Addr  Code            Source

  772:
  773:
  774:
  775:
  776:
  777:
  778:
  779:
  780:
  781:
  782:
  783:
  784:
  785:
  786:
  787:
  788:
  789:
  790:
  791:
  792:
  793:
  794:
  795:
  796:
  797:
  798:
  799:
  800:
  801:	  02F8	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
  802:	  02FB	75 90 67	MOV P1, #067H
  803:	  02FE	75 90 19	MOV P1, #019H
  804:	  0301	75 90 22	MOV P1, #022H
  805:				; PORT 0 VERIFICATION
  806:	  0304	75 C0 67	MOV 0C0H, #067H ; P0EN <- data_1
  807:	  0307	75 80 19	MOV P0, #019H ; verify if p0_a == data_2
  808:				; verification: stimulate p0_y <- data_3
  809:				; PORT 1 VERIFICATION
  810:	  030A	75 C8 22	MOV 0C8H, #022H ; P1EN <- data_3
  811:	  030D	75 90 19	MOV P1, #019H ; verify if p1_a == data_2
  812:				; verification: stimulate p1_y <- data_1
  813:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
  814:				; PORT 2 VERIFICATION
  815:	  0310	75 E8 67	MOV 0E8H, #067H ; P2EN <- data_1
  816:	  0313	75 A0 22	MOV P2, #022H ; verify if p2_a == data_3
  817:				; verification: stimulate p2_y <- data_2
  818:				; PORT 3 VERIFICATION
  819:	  0316	75 F8 19	MOV 0F8H, #019H ; P0EN <- data_2
  820:	  0319	75 B0 67	MOV P3, #067H ; verify if p3_a == data_1
  821:				; verification: stimulate p3_y <- data_3
  822:				; PORT 4 VERIFICATION
  823:	  031C	75 AF 22	MOV 0AFH, #022H ; verify if p4_a == data_3
  824:	  031F	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
  825:	  0322	00		NOP ; synchronization
  826:
  827:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 16



 Line  I  Addr  Code            Source

  828:
  829:
  830:
  831:
  832:
  833:
  834:
  835:
  836:
  837:
  838:
  839:
  840:
  841:	  0323	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
  842:	  0326	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
  843:	  0329	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts
  844:				; moving FFFFFDh to 24bits Timer 0 counter
  845:	  032C	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
  846:	  032F	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
  847:	  0332	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
  848:				; moving 000002h to 24bits Timer 1 counter
  849:	  0335	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
  850:	  0338	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
  851:	  033B	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
  852:	  033E	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
  853:	  0341	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
  854:	  0344	00		NOP ; time to timer 0 overflow
  855:	  0345	00		NOP ; time to timer 0 overflow
  856:	  0346	00		NOP ; time for interrupt to be processed
  857:	  0347	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
  858:	  034A	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
  859:	  034D	75 89 00	MOV TMOD, #00H ; reset TMOD
  860:	  0350	75 88 00	MOV TCON, #00H ; reset TCON
  861:	  0353	75 B8 00	MOV IP, #000H ; All interrupts with low priority
  862:	  0356	75 A8 00	MOV IE, #000H ; All interrupts disabled
  863:
  864:
  865:
  866:
  867:
  868:
  869:
  870:
  871:
  872:
  873:
  874:
  875:
  876:
  877:
  878:
  879:
  880:
  881:	  0359	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
  882:	  035C	75 90 BB	MOV P1, #0BBH ; data_1 to transmit
  883:	  035F	75 90 A5	MOV P1, #0A5H ; data_2 to receive

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 17



 Line  I  Addr  Code            Source

  884:	  0362	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  885:	  0365	D2 9C		SETB 09CH ; REN active
  886:	  0367	C2 00		CLR 00h ; clear a bit in RAM
  887:	  0369	75 99 BB	MOV SBUF, #0BBH ; start transmition.
  888:				; during transmition, verification must stimulate reception, with a start bit and then data_2
  889:	  036C	00		LABEL_TI_23: NOP ; loop until end of transmition
  890:	  036D	30 00 FC	JNB 00h, LABEL_TI_23
  891:	  0370	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
  892:	  0373	00		LABEL_RI_23: NOP ; loop until end of reception
  893:	  0374	20 00 FC	JB 00h, LABEL_RI_23
  894:	  0377	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
  895:	  037A	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
  896:	  037D	75 98 80	MOV SCON, #080H ; clear flags and disable REN
  897:	  0380	75 A8 00	MOV IE, #000H ; All interrupts disabled
  898:
  899:
  900:
  901:
  902:
  903:
  904:
  905:
  906:
  907:
  908:
  909:
  910:
  911:
  912:
  913:
  914:
  915:
  916:
  917:
  918:
  919:
  920:
  921:	  0383	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
  922:	  0386	75 90 A0	MOV P1, #0A0H
  923:	  0389	75 90 C7	MOV P1, #0C7H
  924:	  038C	75 90 15	MOV P1, #015H
  925:				; PORT 0 VERIFICATION
  926:	  038F	75 C0 A0	MOV 0C0H, #0A0H ; P0EN <- data_1
  927:	  0392	75 80 C7	MOV P0, #0C7H ; verify if p0_a == data_2
  928:				; verification: stimulate p0_y <- data_3
  929:				; PORT 1 VERIFICATION
  930:	  0395	75 C8 15	MOV 0C8H, #015H ; P1EN <- data_3
  931:	  0398	75 90 C7	MOV P1, #0C7H ; verify if p1_a == data_2
  932:				; verification: stimulate p1_y <- data_1
  933:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
  934:				; PORT 2 VERIFICATION
  935:	  039B	75 E8 A0	MOV 0E8H, #0A0H ; P2EN <- data_1
  936:	  039E	75 A0 15	MOV P2, #015H ; verify if p2_a == data_3
  937:				; verification: stimulate p2_y <- data_2
  938:				; PORT 3 VERIFICATION
  939:	  03A1	75 F8 C7	MOV 0F8H, #0C7H ; P0EN <- data_2

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 18



 Line  I  Addr  Code            Source

  940:	  03A4	75 B0 A0	MOV P3, #0A0H ; verify if p3_a == data_1
  941:				; verification: stimulate p3_y <- data_3
  942:				; PORT 4 VERIFICATION
  943:	  03A7	75 AF 15	MOV 0AFH, #015H ; verify if p4_a == data_3
  944:	  03AA	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
  945:	  03AD	00		NOP ; synchronization
  946:
  947:
  948:
  949:
  950:
  951:
  952:
  953:
  954:
  955:
  956:
  957:
  958:
  959:
  960:
  961:	  03AE	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
  962:	  03B1	75 90 6F	MOV P1, #06FH ; data_1 to transmit
  963:	  03B4	75 90 72	MOV P1, #072H ; data_2 to receive
  964:	  03B7	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
  965:	  03BA	D2 9C		SETB 09CH ; REN active
  966:	  03BC	C2 00		CLR 00h ; clear a bit in RAM
  967:	  03BE	75 99 6F	MOV SBUF, #06FH ; start transmition.
  968:				; during transmition, verification must stimulate reception, with a start bit and then data_2
  969:	  03C1	00		LABEL_TI_25: NOP ; loop until end of transmition
  970:	  03C2	30 00 FC	JNB 00h, LABEL_TI_25
  971:	  03C5	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
  972:	  03C8	00		LABEL_RI_25: NOP ; loop until end of reception
  973:	  03C9	20 00 FC	JB 00h, LABEL_RI_25
  974:	  03CC	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
  975:	  03CF	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
  976:	  03D2	75 98 80	MOV SCON, #080H ; clear flags and disable REN
  977:	  03D5	75 A8 00	MOV IE, #000H ; All interrupts disabled
  978:
  979:
  980:
  981:
  982:
  983:
  984:
  985:
  986:
  987:
  988:
  989:
  990:
  991:
  992:
  993:
  994:
  995:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 19



 Line  I  Addr  Code            Source

  996:
  997:
  998:
  999:
 1000:
 1001:	  03D8	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 1002:	  03DB	75 90 61	MOV P1, #061H ; data_1 to transmit
 1003:	  03DE	75 90 CF	MOV P1, #0CFH ; data_2 to receive
 1004:	  03E1	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1005:	  03E4	D2 9C		SETB 09CH ; REN active
 1006:	  03E6	C2 00		CLR 00h ; clear a bit in RAM
 1007:	  03E8	75 99 61	MOV SBUF, #061H ; start transmition.
 1008:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 1009:	  03EB	00		LABEL_TI_26: NOP ; loop until end of transmition
 1010:	  03EC	30 00 FC	JNB 00h, LABEL_TI_26
 1011:	  03EF	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 1012:	  03F2	00		LABEL_RI_26: NOP ; loop until end of reception
 1013:	  03F3	20 00 FC	JB 00h, LABEL_RI_26
 1014:	  03F6	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 1015:	  03F9	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 1016:	  03FC	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 1017:	  03FF	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1018:
 1019:
 1020:
 1021:
 1022:
 1023:
 1024:
 1025:
 1026:
 1027:
 1028:
 1029:
 1030:
 1031:
 1032:
 1033:
 1034:
 1035:
 1036:
 1037:
 1038:
 1039:
 1040:
 1041:	  0402	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 1042:	  0405	75 90 96	MOV P1, #096H ; data_1 to transmit
 1043:	  0408	75 90 35	MOV P1, #035H ; data_2 to receive
 1044:	  040B	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1045:	  040E	D2 9C		SETB 09CH ; REN active
 1046:	  0410	C2 00		CLR 00h ; clear a bit in RAM
 1047:	  0412	75 99 96	MOV SBUF, #096H ; start transmition.
 1048:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 1049:	  0415	00		LABEL_TI_27: NOP ; loop until end of transmition
 1050:	  0416	30 00 FC	JNB 00h, LABEL_TI_27
 1051:	  0419	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 20



 Line  I  Addr  Code            Source

 1052:	  041C	00		LABEL_RI_27: NOP ; loop until end of reception
 1053:	  041D	20 00 FC	JB 00h, LABEL_RI_27
 1054:	  0420	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 1055:	  0423	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 1056:	  0426	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 1057:	  0429	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1058:
 1059:
 1060:
 1061:
 1062:
 1063:
 1064:
 1065:
 1066:
 1067:
 1068:
 1069:
 1070:
 1071:
 1072:
 1073:
 1074:
 1075:
 1076:
 1077:
 1078:
 1079:
 1080:
 1081:	  042C	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1082:	  042F	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1083:	  0432	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1084:	  0435	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1085:	  0437	00		NOP ; time for interrupt to be processed
 1086:	  0438	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1087:	  043B	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1088:	  043E	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1089:
 1090:
 1091:
 1092:
 1093:
 1094:
 1095:
 1096:
 1097:
 1098:
 1099:
 1100:
 1101:
 1102:
 1103:
 1104:
 1105:
 1106:
 1107:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 21



 Line  I  Addr  Code            Source

 1108:
 1109:
 1110:
 1111:
 1112:
 1113:
 1114:
 1115:
 1116:
 1117:
 1118:
 1119:
 1120:
 1121:	  0441	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 1122:	  0444	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1123:				; moving FFFFFDh to 24bits Timer 2 counter
 1124:	  0447	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 1125:	  044A	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 1126:	  044D	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 1127:	  0450	C2 00		CLR 00h ; clear a bit in RAM
 1128:	  0452	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 1129:	  0455	00		LABEL_TF2_29: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 1130:	  0456	30 00 FC	JNB 00h, LABEL_TF2_29
 1131:	  0459	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1132:	  045C	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 1133:	  045F	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 1134:	  0462	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1135:
 1136:
 1137:
 1138:
 1139:
 1140:
 1141:
 1142:
 1143:
 1144:
 1145:
 1146:
 1147:
 1148:
 1149:
 1150:
 1151:
 1152:
 1153:
 1154:
 1155:
 1156:
 1157:
 1158:
 1159:
 1160:
 1161:	  0465	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1162:	  0468	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1163:	  046B	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 22



 Line  I  Addr  Code            Source

 1164:	  046E	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1165:	  0470	00		NOP ; time for interrupt to be processed
 1166:	  0471	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1167:	  0474	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1168:	  0477	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1169:
 1170:
 1171:
 1172:
 1173:
 1174:
 1175:
 1176:
 1177:
 1178:
 1179:
 1180:
 1181:
 1182:
 1183:
 1184:
 1185:
 1186:
 1187:
 1188:
 1189:
 1190:
 1191:
 1192:
 1193:
 1194:
 1195:
 1196:
 1197:
 1198:
 1199:
 1200:
 1201:	  047A	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1202:	  047D	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1203:	  0480	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1204:	  0483	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1205:	  0485	00		NOP ; time for interrupt to be processed
 1206:	  0486	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1207:	  0489	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1208:	  048C	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1209:
 1210:
 1211:
 1212:
 1213:
 1214:
 1215:
 1216:
 1217:
 1218:
 1219:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 23



 Line  I  Addr  Code            Source

 1220:
 1221:
 1222:
 1223:
 1224:
 1225:
 1226:
 1227:
 1228:
 1229:
 1230:
 1231:
 1232:
 1233:
 1234:
 1235:
 1236:
 1237:
 1238:
 1239:
 1240:
 1241:	  048F	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1242:	  0492	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1243:	  0495	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1244:	  0498	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1245:	  049A	00		NOP ; time for interrupt to be processed
 1246:	  049B	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1247:	  049E	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1248:	  04A1	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1249:
 1250:
 1251:
 1252:
 1253:
 1254:
 1255:
 1256:
 1257:
 1258:
 1259:
 1260:
 1261:
 1262:
 1263:
 1264:
 1265:
 1266:
 1267:
 1268:
 1269:
 1270:
 1271:
 1272:
 1273:
 1274:
 1275:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 24



 Line  I  Addr  Code            Source

 1276:
 1277:
 1278:
 1279:
 1280:
 1281:	  04A4	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 1282:	  04A7	75 90 FC	MOV P1, #0FCH
 1283:	  04AA	75 90 0A	MOV P1, #0AH
 1284:	  04AD	75 90 E2	MOV P1, #0E2H
 1285:				; PORT 0 VERIFICATION
 1286:	  04B0	75 C0 FC	MOV 0C0H, #0FCH ; P0EN <- data_1
 1287:	  04B3	75 80 0A	MOV P0, #0AH ; verify if p0_a == data_2
 1288:				; verification: stimulate p0_y <- data_3
 1289:				; PORT 1 VERIFICATION
 1290:	  04B6	75 C8 E2	MOV 0C8H, #0E2H ; P1EN <- data_3
 1291:	  04B9	75 90 0A	MOV P1, #0AH ; verify if p1_a == data_2
 1292:				; verification: stimulate p1_y <- data_1
 1293:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 1294:				; PORT 2 VERIFICATION
 1295:	  04BC	75 E8 FC	MOV 0E8H, #0FCH ; P2EN <- data_1
 1296:	  04BF	75 A0 E2	MOV P2, #0E2H ; verify if p2_a == data_3
 1297:				; verification: stimulate p2_y <- data_2
 1298:				; PORT 3 VERIFICATION
 1299:	  04C2	75 F8 0A	MOV 0F8H, #0AH ; P0EN <- data_2
 1300:	  04C5	75 B0 FC	MOV P3, #0FCH ; verify if p3_a == data_1
 1301:				; verification: stimulate p3_y <- data_3
 1302:				; PORT 4 VERIFICATION
 1303:	  04C8	75 AF E2	MOV 0AFH, #0E2H ; verify if p4_a == data_3
 1304:	  04CB	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 1305:	  04CE	00		NOP ; synchronization
 1306:
 1307:
 1308:
 1309:
 1310:
 1311:
 1312:
 1313:
 1314:
 1315:
 1316:
 1317:
 1318:
 1319:
 1320:
 1321:	  04CF	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 1322:	  04D2	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1323:	  04D5	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1324:	  04D8	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 1325:	  04DB	00		NOP ; verification must stimulate external interrupt 0
 1326:	  04DC	00		NOP ; verification must stimulate external interrupt 0
 1327:	  04DD	00		NOP ; verification must stimulate external interrupt 0
 1328:	  04DE	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1329:	  04E1	00		NOP ; verification must stimulate external interrupt 1
 1330:	  04E2	00		NOP ; verification must stimulate external interrupt 1
 1331:	  04E3	00		NOP ; verification must stimulate external interrupt 1

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 25



 Line  I  Addr  Code            Source

 1332:	  04E4	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1333:	  04E7	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 1334:	  04EA	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1335:	  04ED	75 88 00	MOV TCON, #00H ; reset TCON
 1336:
 1337:
 1338:
 1339:
 1340:
 1341:
 1342:
 1343:
 1344:
 1345:
 1346:
 1347:
 1348:
 1349:
 1350:
 1351:
 1352:
 1353:
 1354:
 1355:
 1356:
 1357:
 1358:
 1359:
 1360:
 1361:	  04F0	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 1362:	  04F3	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1363:				; moving FFFFFDh to 24bits Timer 2 counter
 1364:	  04F6	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 1365:	  04F9	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 1366:	  04FC	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 1367:	  04FF	C2 00		CLR 00h ; clear a bit in RAM
 1368:	  0501	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 1369:	  0504	00		LABEL_TF2_35: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 1370:	  0505	30 00 FC	JNB 00h, LABEL_TF2_35
 1371:	  0508	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1372:	  050B	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 1373:	  050E	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 1374:	  0511	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1375:
 1376:
 1377:
 1378:
 1379:
 1380:
 1381:
 1382:
 1383:
 1384:
 1385:
 1386:
 1387:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 26



 Line  I  Addr  Code            Source

 1388:
 1389:
 1390:
 1391:
 1392:
 1393:
 1394:
 1395:
 1396:
 1397:
 1398:
 1399:
 1400:
 1401:	  0514	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 1402:	  0517	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1403:				; moving FFFFFDh to 24bits Timer 2 counter
 1404:	  051A	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 1405:	  051D	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 1406:	  0520	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 1407:	  0523	C2 00		CLR 00h ; clear a bit in RAM
 1408:	  0525	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 1409:	  0528	00		LABEL_TF2_36: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 1410:	  0529	30 00 FC	JNB 00h, LABEL_TF2_36
 1411:	  052C	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1412:	  052F	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 1413:	  0532	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 1414:	  0535	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1415:
 1416:
 1417:
 1418:
 1419:
 1420:
 1421:
 1422:
 1423:
 1424:
 1425:
 1426:
 1427:
 1428:
 1429:
 1430:
 1431:
 1432:
 1433:
 1434:
 1435:
 1436:
 1437:
 1438:
 1439:
 1440:
 1441:	  0538	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1442:	  053B	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1443:	  053E	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 27



 Line  I  Addr  Code            Source

 1444:	  0541	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1445:	  0543	00		NOP ; time for interrupt to be processed
 1446:	  0544	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1447:	  0547	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1448:	  054A	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1449:
 1450:
 1451:
 1452:
 1453:
 1454:
 1455:
 1456:
 1457:
 1458:
 1459:
 1460:
 1461:
 1462:
 1463:
 1464:
 1465:
 1466:
 1467:
 1468:
 1469:
 1470:
 1471:
 1472:
 1473:
 1474:
 1475:
 1476:
 1477:
 1478:
 1479:
 1480:
 1481:	  054D	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
 1482:	  0550	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
 1483:	  0553	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts
 1484:				; moving FFFFFDh to 24bits Timer 0 counter
 1485:	  0556	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
 1486:	  0559	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
 1487:	  055C	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
 1488:				; moving 000002h to 24bits Timer 1 counter
 1489:	  055F	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
 1490:	  0562	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
 1491:	  0565	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
 1492:	  0568	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
 1493:	  056B	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
 1494:	  056E	00		NOP ; time to timer 0 overflow
 1495:	  056F	00		NOP ; time to timer 0 overflow
 1496:	  0570	00		NOP ; time for interrupt to be processed
 1497:	  0571	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1498:	  0574	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
 1499:	  0577	75 89 00	MOV TMOD, #00H ; reset TMOD

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 28



 Line  I  Addr  Code            Source

 1500:	  057A	75 88 00	MOV TCON, #00H ; reset TCON
 1501:	  057D	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1502:	  0580	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1503:
 1504:
 1505:
 1506:
 1507:
 1508:
 1509:
 1510:
 1511:
 1512:
 1513:
 1514:
 1515:
 1516:
 1517:
 1518:
 1519:
 1520:
 1521:	  0583	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 1522:	  0586	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1523:				; moving FFFFFDh to 24bits Timer 2 counter
 1524:	  0589	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 1525:	  058C	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 1526:	  058F	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 1527:	  0592	C2 00		CLR 00h ; clear a bit in RAM
 1528:	  0594	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 1529:	  0597	00		LABEL_TF2_39: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 1530:	  0598	30 00 FC	JNB 00h, LABEL_TF2_39
 1531:	  059B	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1532:	  059E	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 1533:	  05A1	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 1534:	  05A4	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1535:
 1536:
 1537:
 1538:
 1539:
 1540:
 1541:
 1542:
 1543:
 1544:
 1545:
 1546:
 1547:
 1548:
 1549:
 1550:
 1551:
 1552:
 1553:
 1554:
 1555:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 29



 Line  I  Addr  Code            Source

 1556:
 1557:
 1558:
 1559:
 1560:
 1561:	  05A7	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
 1562:	  05AA	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
 1563:	  05AD	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts
 1564:				; moving FFFFFDh to 24bits Timer 0 counter
 1565:	  05B0	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
 1566:	  05B3	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
 1567:	  05B6	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
 1568:				; moving 000002h to 24bits Timer 1 counter
 1569:	  05B9	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
 1570:	  05BC	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
 1571:	  05BF	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
 1572:	  05C2	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
 1573:	  05C5	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
 1574:	  05C8	00		NOP ; time to timer 0 overflow
 1575:	  05C9	00		NOP ; time to timer 0 overflow
 1576:	  05CA	00		NOP ; time for interrupt to be processed
 1577:	  05CB	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1578:	  05CE	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
 1579:	  05D1	75 89 00	MOV TMOD, #00H ; reset TMOD
 1580:	  05D4	75 88 00	MOV TCON, #00H ; reset TCON
 1581:	  05D7	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1582:	  05DA	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1583:
 1584:
 1585:
 1586:
 1587:
 1588:
 1589:
 1590:
 1591:
 1592:
 1593:
 1594:
 1595:
 1596:
 1597:
 1598:
 1599:
 1600:
 1601:	  05DD	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 1602:	  05E0	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1603:				; moving FFFFFDh to 24bits Timer 2 counter
 1604:	  05E3	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 1605:	  05E6	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 1606:	  05E9	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 1607:	  05EC	C2 00		CLR 00h ; clear a bit in RAM
 1608:	  05EE	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 1609:	  05F1	00		LABEL_TF2_41: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 1610:	  05F2	30 00 FC	JNB 00h, LABEL_TF2_41
 1611:	  05F5	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 30



 Line  I  Addr  Code            Source

 1612:	  05F8	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 1613:	  05FB	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 1614:	  05FE	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1615:
 1616:
 1617:
 1618:
 1619:
 1620:
 1621:
 1622:
 1623:
 1624:
 1625:
 1626:
 1627:
 1628:
 1629:
 1630:
 1631:
 1632:
 1633:
 1634:
 1635:
 1636:
 1637:
 1638:
 1639:
 1640:
 1641:	  0601	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 1642:	  0604	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1643:	  0607	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1644:	  060A	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 1645:	  060D	00		NOP ; verification must stimulate external interrupt 0
 1646:	  060E	00		NOP ; verification must stimulate external interrupt 0
 1647:	  060F	00		NOP ; verification must stimulate external interrupt 0
 1648:	  0610	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1649:	  0613	00		NOP ; verification must stimulate external interrupt 1
 1650:	  0614	00		NOP ; verification must stimulate external interrupt 1
 1651:	  0615	00		NOP ; verification must stimulate external interrupt 1
 1652:	  0616	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1653:	  0619	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 1654:	  061C	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1655:	  061F	75 88 00	MOV TCON, #00H ; reset TCON
 1656:
 1657:
 1658:
 1659:
 1660:
 1661:
 1662:
 1663:
 1664:
 1665:
 1666:
 1667:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 31



 Line  I  Addr  Code            Source

 1668:
 1669:
 1670:
 1671:
 1672:
 1673:
 1674:
 1675:
 1676:
 1677:
 1678:
 1679:
 1680:
 1681:	  0622	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
 1682:	  0625	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
 1683:	  0628	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts
 1684:				; moving FFFFFDh to 24bits Timer 0 counter
 1685:	  062B	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
 1686:	  062E	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
 1687:	  0631	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
 1688:				; moving 000002h to 24bits Timer 1 counter
 1689:	  0634	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
 1690:	  0637	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
 1691:	  063A	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
 1692:	  063D	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
 1693:	  0640	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
 1694:	  0643	00		NOP ; time to timer 0 overflow
 1695:	  0644	00		NOP ; time to timer 0 overflow
 1696:	  0645	00		NOP ; time for interrupt to be processed
 1697:	  0646	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1698:	  0649	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
 1699:	  064C	75 89 00	MOV TMOD, #00H ; reset TMOD
 1700:	  064F	75 88 00	MOV TCON, #00H ; reset TCON
 1701:	  0652	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1702:	  0655	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1703:
 1704:
 1705:
 1706:
 1707:
 1708:
 1709:
 1710:
 1711:
 1712:
 1713:
 1714:
 1715:
 1716:
 1717:
 1718:
 1719:
 1720:
 1721:	  0658	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1722:	  065B	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1723:	  065E	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 32



 Line  I  Addr  Code            Source

 1724:	  0661	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1725:	  0663	00		NOP ; time for interrupt to be processed
 1726:	  0664	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1727:	  0667	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1728:	  066A	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1729:
 1730:
 1731:
 1732:
 1733:
 1734:
 1735:
 1736:
 1737:
 1738:
 1739:
 1740:
 1741:
 1742:
 1743:
 1744:
 1745:
 1746:
 1747:
 1748:
 1749:
 1750:
 1751:
 1752:
 1753:
 1754:
 1755:
 1756:
 1757:
 1758:
 1759:
 1760:
 1761:	  066D	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 1762:	  0670	75 90 AA	MOV P1, #0AAH
 1763:	  0673	75 90 2D	MOV P1, #02DH
 1764:	  0676	75 90 21	MOV P1, #021H
 1765:				; PORT 0 VERIFICATION
 1766:	  0679	75 C0 AA	MOV 0C0H, #0AAH ; P0EN <- data_1
 1767:	  067C	75 80 2D	MOV P0, #02DH ; verify if p0_a == data_2
 1768:				; verification: stimulate p0_y <- data_3
 1769:				; PORT 1 VERIFICATION
 1770:	  067F	75 C8 21	MOV 0C8H, #021H ; P1EN <- data_3
 1771:	  0682	75 90 2D	MOV P1, #02DH ; verify if p1_a == data_2
 1772:				; verification: stimulate p1_y <- data_1
 1773:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 1774:				; PORT 2 VERIFICATION
 1775:	  0685	75 E8 AA	MOV 0E8H, #0AAH ; P2EN <- data_1
 1776:	  0688	75 A0 21	MOV P2, #021H ; verify if p2_a == data_3
 1777:				; verification: stimulate p2_y <- data_2
 1778:				; PORT 3 VERIFICATION
 1779:	  068B	75 F8 2D	MOV 0F8H, #02DH ; P0EN <- data_2

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 33



 Line  I  Addr  Code            Source

 1780:	  068E	75 B0 AA	MOV P3, #0AAH ; verify if p3_a == data_1
 1781:				; verification: stimulate p3_y <- data_3
 1782:				; PORT 4 VERIFICATION
 1783:	  0691	75 AF 21	MOV 0AFH, #021H ; verify if p4_a == data_3
 1784:	  0694	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 1785:	  0697	00		NOP ; synchronization
 1786:
 1787:
 1788:
 1789:
 1790:
 1791:
 1792:
 1793:
 1794:
 1795:
 1796:
 1797:
 1798:
 1799:
 1800:
 1801:	  0698	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1802:	  069B	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1803:	  069E	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1804:	  06A1	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1805:	  06A3	00		NOP ; time for interrupt to be processed
 1806:	  06A4	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1807:	  06A7	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1808:	  06AA	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1809:
 1810:
 1811:
 1812:
 1813:
 1814:
 1815:
 1816:
 1817:
 1818:
 1819:
 1820:
 1821:
 1822:
 1823:
 1824:
 1825:
 1826:
 1827:
 1828:
 1829:
 1830:
 1831:
 1832:
 1833:
 1834:
 1835:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 34



 Line  I  Addr  Code            Source

 1836:
 1837:
 1838:
 1839:
 1840:
 1841:	  06AD	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 1842:	  06B0	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1843:	  06B3	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1844:	  06B6	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 1845:	  06B8	00		NOP ; time for interrupt to be processed
 1846:	  06B9	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1847:	  06BC	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 1848:	  06BF	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1849:
 1850:
 1851:
 1852:
 1853:
 1854:
 1855:
 1856:
 1857:
 1858:
 1859:
 1860:
 1861:
 1862:
 1863:
 1864:
 1865:
 1866:
 1867:
 1868:
 1869:
 1870:
 1871:
 1872:
 1873:
 1874:
 1875:
 1876:
 1877:
 1878:
 1879:
 1880:
 1881:	  06C2	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 1882:	  06C5	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1883:				; moving FFFFFDh to 24bits Timer 2 counter
 1884:	  06C8	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 1885:	  06CB	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 1886:	  06CE	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 1887:	  06D1	C2 00		CLR 00h ; clear a bit in RAM
 1888:	  06D3	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 1889:	  06D6	00		LABEL_TF2_48: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 1890:	  06D7	30 00 FC	JNB 00h, LABEL_TF2_48
 1891:	  06DA	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 35



 Line  I  Addr  Code            Source

 1892:	  06DD	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 1893:	  06E0	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 1894:	  06E3	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1895:
 1896:
 1897:
 1898:
 1899:
 1900:
 1901:
 1902:
 1903:
 1904:
 1905:
 1906:
 1907:
 1908:
 1909:
 1910:
 1911:
 1912:
 1913:
 1914:
 1915:
 1916:
 1917:
 1918:
 1919:
 1920:
 1921:	  06E6	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 1922:	  06E9	75 90 58	MOV P1, #058H
 1923:	  06EC	75 90 95	MOV P1, #095H
 1924:	  06EF	75 90 1B	MOV P1, #01BH
 1925:				; PORT 0 VERIFICATION
 1926:	  06F2	75 C0 58	MOV 0C0H, #058H ; P0EN <- data_1
 1927:	  06F5	75 80 95	MOV P0, #095H ; verify if p0_a == data_2
 1928:				; verification: stimulate p0_y <- data_3
 1929:				; PORT 1 VERIFICATION
 1930:	  06F8	75 C8 1B	MOV 0C8H, #01BH ; P1EN <- data_3
 1931:	  06FB	75 90 95	MOV P1, #095H ; verify if p1_a == data_2
 1932:				; verification: stimulate p1_y <- data_1
 1933:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 1934:				; PORT 2 VERIFICATION
 1935:	  06FE	75 E8 58	MOV 0E8H, #058H ; P2EN <- data_1
 1936:	  0701	75 A0 1B	MOV P2, #01BH ; verify if p2_a == data_3
 1937:				; verification: stimulate p2_y <- data_2
 1938:				; PORT 3 VERIFICATION
 1939:	  0704	75 F8 95	MOV 0F8H, #095H ; P0EN <- data_2
 1940:	  0707	75 B0 58	MOV P3, #058H ; verify if p3_a == data_1
 1941:				; verification: stimulate p3_y <- data_3
 1942:				; PORT 4 VERIFICATION
 1943:	  070A	75 AF 1B	MOV 0AFH, #01BH ; verify if p4_a == data_3
 1944:	  070D	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 1945:	  0710	00		NOP ; synchronization
 1946:
 1947:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 36



 Line  I  Addr  Code            Source

 1948:
 1949:
 1950:
 1951:
 1952:
 1953:
 1954:
 1955:
 1956:
 1957:
 1958:
 1959:
 1960:
 1961:	  0711	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 1962:	  0714	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 1963:	  0717	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 1964:	  071A	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 1965:	  071D	00		NOP ; verification must stimulate external interrupt 0
 1966:	  071E	00		NOP ; verification must stimulate external interrupt 0
 1967:	  071F	00		NOP ; verification must stimulate external interrupt 0
 1968:	  0720	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1969:	  0723	00		NOP ; verification must stimulate external interrupt 1
 1970:	  0724	00		NOP ; verification must stimulate external interrupt 1
 1971:	  0725	00		NOP ; verification must stimulate external interrupt 1
 1972:	  0726	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 1973:	  0729	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 1974:	  072C	75 A8 00	MOV IE, #000H ; All interrupts disabled
 1975:	  072F	75 88 00	MOV TCON, #00H ; reset TCON
 1976:
 1977:
 1978:
 1979:
 1980:
 1981:
 1982:
 1983:
 1984:
 1985:
 1986:
 1987:
 1988:
 1989:
 1990:
 1991:
 1992:
 1993:
 1994:
 1995:
 1996:
 1997:
 1998:
 1999:
 2000:
 2001:	  0732	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2002:	  0735	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2003:				; moving FFFFFDh to 24bits Timer 2 counter

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 37



 Line  I  Addr  Code            Source

 2004:	  0738	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2005:	  073B	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2006:	  073E	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2007:	  0741	C2 00		CLR 00h ; clear a bit in RAM
 2008:	  0743	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2009:	  0746	00		LABEL_TF2_51: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2010:	  0747	30 00 FC	JNB 00h, LABEL_TF2_51
 2011:	  074A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2012:	  074D	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2013:	  0750	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2014:	  0753	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2015:
 2016:
 2017:
 2018:
 2019:
 2020:
 2021:
 2022:
 2023:
 2024:
 2025:
 2026:
 2027:
 2028:
 2029:
 2030:
 2031:
 2032:
 2033:
 2034:
 2035:
 2036:
 2037:
 2038:
 2039:
 2040:
 2041:	  0756	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 2042:	  0759	75 90 51	MOV P1, #051H ; data_1 to transmit
 2043:	  075C	75 90 87	MOV P1, #087H ; data_2 to receive
 2044:	  075F	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2045:	  0762	D2 9C		SETB 09CH ; REN active
 2046:	  0764	C2 00		CLR 00h ; clear a bit in RAM
 2047:	  0766	75 99 51	MOV SBUF, #051H ; start transmition.
 2048:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 2049:	  0769	00		LABEL_TI_52: NOP ; loop until end of transmition
 2050:	  076A	30 00 FC	JNB 00h, LABEL_TI_52
 2051:	  076D	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 2052:	  0770	00		LABEL_RI_52: NOP ; loop until end of reception
 2053:	  0771	20 00 FC	JB 00h, LABEL_RI_52
 2054:	  0774	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 2055:	  0777	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 2056:	  077A	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 2057:	  077D	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2058:
 2059:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 38



 Line  I  Addr  Code            Source

 2060:
 2061:
 2062:
 2063:
 2064:
 2065:
 2066:
 2067:
 2068:
 2069:
 2070:
 2071:
 2072:
 2073:
 2074:
 2075:
 2076:
 2077:
 2078:
 2079:
 2080:
 2081:	  0780	75 90 01	MOV P1, #01H ; TIMER 0 and 1 FUNCTIONALITY AND INTERRUPT
 2082:	  0783	75 B8 08	MOV IP, #008H ; Timer 1 with high priority and others with low priority
 2083:	  0786	75 A8 FA	MOV IE, #0FAH ; All interrupts enabled, except external interrupts
 2084:				; moving FFFFFDh to 24bits Timer 0 counter
 2085:	  0789	75 8C FF	MOV 08CH, #0FFH ; move FFh to TH0
 2086:	  078C	75 8E FF	MOV 08EH, #0FFH ; move FFh to TM0
 2087:	  078F	75 8A FD	MOV 08AH, #0FDH ; move FDh to TL0
 2088:				; moving 000002h to 24bits Timer 1 counter
 2089:	  0792	75 8D 00	MOV 08DH, #000H ; move 00h to TH0
 2090:	  0795	75 8F 00	MOV 08FH, #000H ; move 00h to TM0
 2091:	  0798	75 8B 02	MOV 08BH, #002H ; move 02h to TL0
 2092:	  079B	75 89 B0	MOV TMOD, #0B0H ; timer0: mode 0 | timer1: mode 3 and controlled by external input INT1
 2093:	  079E	75 88 50	MOV TCON, #50H ; run timer 0 and 1 (TR0 and TR1 in TCON)
 2094:	  07A1	00		NOP ; time to timer 0 overflow
 2095:	  07A2	00		NOP ; time to timer 0 overflow
 2096:	  07A3	00		NOP ; time for interrupt to be processed
 2097:	  07A4	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2098:	  07A7	85 88 90	MOV P1, TCON ; verify if TF1 (bit 7) and TF0 (bit 5) are cleared
 2099:	  07AA	75 89 00	MOV TMOD, #00H ; reset TMOD
 2100:	  07AD	75 88 00	MOV TCON, #00H ; reset TCON
 2101:	  07B0	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2102:	  07B3	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2103:
 2104:
 2105:
 2106:
 2107:
 2108:
 2109:
 2110:
 2111:
 2112:
 2113:
 2114:
 2115:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 39



 Line  I  Addr  Code            Source

 2116:
 2117:
 2118:
 2119:
 2120:
 2121:	  07B6	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2122:	  07B9	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2123:				; moving FFFFFDh to 24bits Timer 2 counter
 2124:	  07BC	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2125:	  07BF	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2126:	  07C2	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2127:	  07C5	C2 00		CLR 00h ; clear a bit in RAM
 2128:	  07C7	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2129:	  07CA	00		LABEL_TF2_54: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2130:	  07CB	30 00 FC	JNB 00h, LABEL_TF2_54
 2131:	  07CE	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2132:	  07D1	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2133:	  07D4	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2134:	  07D7	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2135:
 2136:
 2137:
 2138:
 2139:
 2140:
 2141:
 2142:
 2143:
 2144:
 2145:
 2146:
 2147:
 2148:
 2149:
 2150:
 2151:
 2152:
 2153:
 2154:
 2155:
 2156:
 2157:
 2158:
 2159:
 2160:
 2161:	  07DA	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2162:	  07DD	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2163:				; moving FFFFFDh to 24bits Timer 2 counter
 2164:	  07E0	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2165:	  07E3	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2166:	  07E6	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2167:	  07E9	C2 00		CLR 00h ; clear a bit in RAM
 2168:	  07EB	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2169:	  07EE	00		LABEL_TF2_55: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2170:	  07EF	30 00 FC	JNB 00h, LABEL_TF2_55
 2171:	  07F2	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 40



 Line  I  Addr  Code            Source

 2172:	  07F5	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2173:	  07F8	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2174:	  07FB	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2175:
 2176:
 2177:
 2178:
 2179:
 2180:
 2181:
 2182:
 2183:
 2184:
 2185:
 2186:
 2187:
 2188:
 2189:
 2190:
 2191:
 2192:
 2193:
 2194:
 2195:
 2196:
 2197:
 2198:
 2199:
 2200:
 2201:	  07FE	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2202:	  0801	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2203:				; moving FFFFFDh to 24bits Timer 2 counter
 2204:	  0804	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2205:	  0807	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2206:	  080A	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2207:	  080D	C2 00		CLR 00h ; clear a bit in RAM
 2208:	  080F	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2209:	  0812	00		LABEL_TF2_56: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2210:	  0813	30 00 FC	JNB 00h, LABEL_TF2_56
 2211:	  0816	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2212:	  0819	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2213:	  081C	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2214:	  081F	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2215:
 2216:
 2217:
 2218:
 2219:
 2220:
 2221:
 2222:
 2223:
 2224:
 2225:
 2226:
 2227:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 41



 Line  I  Addr  Code            Source

 2228:
 2229:
 2230:
 2231:
 2232:
 2233:
 2234:
 2235:
 2236:
 2237:
 2238:
 2239:
 2240:
 2241:	  0822	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 2242:	  0825	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2243:	  0828	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2244:	  082B	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 2245:	  082D	00		NOP ; time for interrupt to be processed
 2246:	  082E	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2247:	  0831	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 2248:	  0834	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2249:
 2250:
 2251:
 2252:
 2253:
 2254:
 2255:
 2256:
 2257:
 2258:
 2259:
 2260:
 2261:
 2262:
 2263:
 2264:
 2265:
 2266:
 2267:
 2268:
 2269:
 2270:
 2271:
 2272:
 2273:
 2274:
 2275:
 2276:
 2277:
 2278:
 2279:
 2280:
 2281:	  0837	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 2282:	  083A	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2283:	  083D	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 42



 Line  I  Addr  Code            Source

 2284:	  0840	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 2285:	  0842	00		NOP ; time for interrupt to be processed
 2286:	  0843	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2287:	  0846	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 2288:	  0849	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2289:
 2290:
 2291:
 2292:
 2293:
 2294:
 2295:
 2296:
 2297:
 2298:
 2299:
 2300:
 2301:
 2302:
 2303:
 2304:
 2305:
 2306:
 2307:
 2308:
 2309:
 2310:
 2311:
 2312:
 2313:
 2314:
 2315:
 2316:
 2317:
 2318:
 2319:
 2320:
 2321:	  084C	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 2322:	  084F	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2323:	  0852	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2324:	  0855	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 2325:	  0858	00		NOP ; verification must stimulate external interrupt 0
 2326:	  0859	00		NOP ; verification must stimulate external interrupt 0
 2327:	  085A	00		NOP ; verification must stimulate external interrupt 0
 2328:	  085B	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2329:	  085E	00		NOP ; verification must stimulate external interrupt 1
 2330:	  085F	00		NOP ; verification must stimulate external interrupt 1
 2331:	  0860	00		NOP ; verification must stimulate external interrupt 1
 2332:	  0861	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2333:	  0864	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 2334:	  0867	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2335:	  086A	75 88 00	MOV TCON, #00H ; reset TCON
 2336:
 2337:
 2338:
 2339:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 43



 Line  I  Addr  Code            Source

 2340:
 2341:
 2342:
 2343:
 2344:
 2345:
 2346:
 2347:
 2348:
 2349:
 2350:
 2351:
 2352:
 2353:
 2354:
 2355:
 2356:
 2357:
 2358:
 2359:
 2360:
 2361:	  086D	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 2362:	  0870	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2363:	  0873	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2364:	  0876	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 2365:	  0878	00		NOP ; time for interrupt to be processed
 2366:	  0879	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2367:	  087C	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 2368:	  087F	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2369:
 2370:
 2371:
 2372:
 2373:
 2374:
 2375:
 2376:
 2377:
 2378:
 2379:
 2380:
 2381:
 2382:
 2383:
 2384:
 2385:
 2386:
 2387:
 2388:
 2389:
 2390:
 2391:
 2392:
 2393:
 2394:
 2395:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 44



 Line  I  Addr  Code            Source

 2396:
 2397:
 2398:
 2399:
 2400:
 2401:	  0882	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 2402:	  0885	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2403:	  0888	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2404:	  088B	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 2405:	  088E	00		NOP ; verification must stimulate external interrupt 0
 2406:	  088F	00		NOP ; verification must stimulate external interrupt 0
 2407:	  0890	00		NOP ; verification must stimulate external interrupt 0
 2408:	  0891	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2409:	  0894	00		NOP ; verification must stimulate external interrupt 1
 2410:	  0895	00		NOP ; verification must stimulate external interrupt 1
 2411:	  0896	00		NOP ; verification must stimulate external interrupt 1
 2412:	  0897	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2413:	  089A	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 2414:	  089D	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2415:	  08A0	75 88 00	MOV TCON, #00H ; reset TCON
 2416:
 2417:
 2418:
 2419:
 2420:
 2421:
 2422:
 2423:
 2424:
 2425:
 2426:
 2427:
 2428:
 2429:
 2430:
 2431:
 2432:
 2433:
 2434:
 2435:
 2436:
 2437:
 2438:
 2439:
 2440:
 2441:	  08A3	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2442:	  08A6	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2443:				; moving FFFFFDh to 24bits Timer 2 counter
 2444:	  08A9	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2445:	  08AC	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2446:	  08AF	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2447:	  08B2	C2 00		CLR 00h ; clear a bit in RAM
 2448:	  08B4	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2449:	  08B7	00		LABEL_TF2_62: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2450:	  08B8	30 00 FC	JNB 00h, LABEL_TF2_62
 2451:	  08BB	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 45



 Line  I  Addr  Code            Source

 2452:	  08BE	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2453:	  08C1	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2454:	  08C4	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2455:
 2456:
 2457:
 2458:
 2459:
 2460:
 2461:
 2462:
 2463:
 2464:
 2465:
 2466:
 2467:
 2468:
 2469:
 2470:
 2471:
 2472:
 2473:
 2474:
 2475:
 2476:
 2477:
 2478:
 2479:
 2480:
 2481:	  08C7	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 2482:	  08CA	75 90 D4	MOV P1, #0D4H ; data_1 to transmit
 2483:	  08CD	75 90 41	MOV P1, #041H ; data_2 to receive
 2484:	  08D0	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2485:	  08D3	D2 9C		SETB 09CH ; REN active
 2486:	  08D5	C2 00		CLR 00h ; clear a bit in RAM
 2487:	  08D7	75 99 D4	MOV SBUF, #0D4H ; start transmition.
 2488:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 2489:	  08DA	00		LABEL_TI_63: NOP ; loop until end of transmition
 2490:	  08DB	30 00 FC	JNB 00h, LABEL_TI_63
 2491:	  08DE	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 2492:	  08E1	00		LABEL_RI_63: NOP ; loop until end of reception
 2493:	  08E2	20 00 FC	JB 00h, LABEL_RI_63
 2494:	  08E5	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 2495:	  08E8	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 2496:	  08EB	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 2497:	  08EE	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2498:
 2499:
 2500:
 2501:
 2502:
 2503:
 2504:
 2505:
 2506:
 2507:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 46



 Line  I  Addr  Code            Source

 2508:
 2509:
 2510:
 2511:
 2512:
 2513:
 2514:
 2515:
 2516:
 2517:
 2518:
 2519:
 2520:
 2521:	  08F1	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2522:	  08F4	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2523:				; moving FFFFFDh to 24bits Timer 2 counter
 2524:	  08F7	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2525:	  08FA	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2526:	  08FD	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2527:	  0900	C2 00		CLR 00h ; clear a bit in RAM
 2528:	  0902	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2529:	  0905	00		LABEL_TF2_64: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2530:	  0906	30 00 FC	JNB 00h, LABEL_TF2_64
 2531:	  0909	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2532:	  090C	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2533:	  090F	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2534:	  0912	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2535:
 2536:
 2537:
 2538:
 2539:
 2540:
 2541:
 2542:
 2543:
 2544:
 2545:
 2546:
 2547:
 2548:
 2549:
 2550:
 2551:
 2552:
 2553:
 2554:
 2555:
 2556:
 2557:
 2558:
 2559:
 2560:
 2561:	  0915	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 2562:	  0918	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2563:	  091B	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 47



 Line  I  Addr  Code            Source

 2564:	  091E	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 2565:	  0921	00		NOP ; verification must stimulate external interrupt 0
 2566:	  0922	00		NOP ; verification must stimulate external interrupt 0
 2567:	  0923	00		NOP ; verification must stimulate external interrupt 0
 2568:	  0924	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2569:	  0927	00		NOP ; verification must stimulate external interrupt 1
 2570:	  0928	00		NOP ; verification must stimulate external interrupt 1
 2571:	  0929	00		NOP ; verification must stimulate external interrupt 1
 2572:	  092A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2573:	  092D	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 2574:	  0930	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2575:	  0933	75 88 00	MOV TCON, #00H ; reset TCON
 2576:
 2577:
 2578:
 2579:
 2580:
 2581:
 2582:
 2583:
 2584:
 2585:
 2586:
 2587:
 2588:
 2589:
 2590:
 2591:
 2592:
 2593:
 2594:
 2595:
 2596:
 2597:
 2598:
 2599:
 2600:
 2601:	  0936	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 2602:	  0939	75 90 C3	MOV P1, #0C3H
 2603:	  093C	75 90 A0	MOV P1, #0A0H
 2604:	  093F	75 90 C5	MOV P1, #0C5H
 2605:				; PORT 0 VERIFICATION
 2606:	  0942	75 C0 C3	MOV 0C0H, #0C3H ; P0EN <- data_1
 2607:	  0945	75 80 A0	MOV P0, #0A0H ; verify if p0_a == data_2
 2608:				; verification: stimulate p0_y <- data_3
 2609:				; PORT 1 VERIFICATION
 2610:	  0948	75 C8 C5	MOV 0C8H, #0C5H ; P1EN <- data_3
 2611:	  094B	75 90 A0	MOV P1, #0A0H ; verify if p1_a == data_2
 2612:				; verification: stimulate p1_y <- data_1
 2613:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 2614:				; PORT 2 VERIFICATION
 2615:	  094E	75 E8 C3	MOV 0E8H, #0C3H ; P2EN <- data_1
 2616:	  0951	75 A0 C5	MOV P2, #0C5H ; verify if p2_a == data_3
 2617:				; verification: stimulate p2_y <- data_2
 2618:				; PORT 3 VERIFICATION
 2619:	  0954	75 F8 A0	MOV 0F8H, #0A0H ; P0EN <- data_2

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 48



 Line  I  Addr  Code            Source

 2620:	  0957	75 B0 C3	MOV P3, #0C3H ; verify if p3_a == data_1
 2621:				; verification: stimulate p3_y <- data_3
 2622:				; PORT 4 VERIFICATION
 2623:	  095A	75 AF C5	MOV 0AFH, #0C5H ; verify if p4_a == data_3
 2624:	  095D	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 2625:	  0960	00		NOP ; synchronization
 2626:
 2627:
 2628:
 2629:
 2630:
 2631:
 2632:
 2633:
 2634:
 2635:
 2636:
 2637:
 2638:
 2639:
 2640:
 2641:	  0961	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 2642:	  0964	75 90 23	MOV P1, #023H ; data_1 to transmit
 2643:	  0967	75 90 B2	MOV P1, #0B2H ; data_2 to receive
 2644:	  096A	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2645:	  096D	D2 9C		SETB 09CH ; REN active
 2646:	  096F	C2 00		CLR 00h ; clear a bit in RAM
 2647:	  0971	75 99 23	MOV SBUF, #023H ; start transmition.
 2648:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 2649:	  0974	00		LABEL_TI_67: NOP ; loop until end of transmition
 2650:	  0975	30 00 FC	JNB 00h, LABEL_TI_67
 2651:	  0978	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 2652:	  097B	00		LABEL_RI_67: NOP ; loop until end of reception
 2653:	  097C	20 00 FC	JB 00h, LABEL_RI_67
 2654:	  097F	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 2655:	  0982	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 2656:	  0985	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 2657:	  0988	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2658:
 2659:
 2660:
 2661:
 2662:
 2663:
 2664:
 2665:
 2666:
 2667:
 2668:
 2669:
 2670:
 2671:
 2672:
 2673:
 2674:
 2675:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 49



 Line  I  Addr  Code            Source

 2676:
 2677:
 2678:
 2679:
 2680:
 2681:	  098B	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2682:	  098E	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2683:				; moving FFFFFDh to 24bits Timer 2 counter
 2684:	  0991	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2685:	  0994	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2686:	  0997	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2687:	  099A	C2 00		CLR 00h ; clear a bit in RAM
 2688:	  099C	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2689:	  099F	00		LABEL_TF2_68: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2690:	  09A0	30 00 FC	JNB 00h, LABEL_TF2_68
 2691:	  09A3	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2692:	  09A6	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2693:	  09A9	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2694:	  09AC	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2695:
 2696:
 2697:
 2698:
 2699:
 2700:
 2701:
 2702:
 2703:
 2704:
 2705:
 2706:
 2707:
 2708:
 2709:
 2710:
 2711:
 2712:
 2713:
 2714:
 2715:
 2716:
 2717:
 2718:
 2719:
 2720:
 2721:	  09AF	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 2722:	  09B2	75 90 C1	MOV P1, #0C1H ; data_1 to transmit
 2723:	  09B5	75 90 3E	MOV P1, #03EH ; data_2 to receive
 2724:	  09B8	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2725:	  09BB	D2 9C		SETB 09CH ; REN active
 2726:	  09BD	C2 00		CLR 00h ; clear a bit in RAM
 2727:	  09BF	75 99 C1	MOV SBUF, #0C1H ; start transmition.
 2728:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 2729:	  09C2	00		LABEL_TI_69: NOP ; loop until end of transmition
 2730:	  09C3	30 00 FC	JNB 00h, LABEL_TI_69
 2731:	  09C6	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 50



 Line  I  Addr  Code            Source

 2732:	  09C9	00		LABEL_RI_69: NOP ; loop until end of reception
 2733:	  09CA	20 00 FC	JB 00h, LABEL_RI_69
 2734:	  09CD	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 2735:	  09D0	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 2736:	  09D3	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 2737:	  09D6	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2738:
 2739:
 2740:
 2741:
 2742:
 2743:
 2744:
 2745:
 2746:
 2747:
 2748:
 2749:
 2750:
 2751:
 2752:
 2753:
 2754:
 2755:
 2756:
 2757:
 2758:
 2759:
 2760:
 2761:	  09D9	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 2762:	  09DC	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2763:	  09DF	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2764:	  09E2	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 2765:	  09E5	00		NOP ; verification must stimulate external interrupt 0
 2766:	  09E6	00		NOP ; verification must stimulate external interrupt 0
 2767:	  09E7	00		NOP ; verification must stimulate external interrupt 0
 2768:	  09E8	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2769:	  09EB	00		NOP ; verification must stimulate external interrupt 1
 2770:	  09EC	00		NOP ; verification must stimulate external interrupt 1
 2771:	  09ED	00		NOP ; verification must stimulate external interrupt 1
 2772:	  09EE	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2773:	  09F1	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 2774:	  09F4	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2775:	  09F7	75 88 00	MOV TCON, #00H ; reset TCON
 2776:
 2777:
 2778:
 2779:
 2780:
 2781:
 2782:
 2783:
 2784:
 2785:
 2786:
 2787:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 51



 Line  I  Addr  Code            Source

 2788:
 2789:
 2790:
 2791:
 2792:
 2793:
 2794:
 2795:
 2796:
 2797:
 2798:
 2799:
 2800:
 2801:	  09FA	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 2802:	  09FD	75 90 6E	MOV P1, #06EH ; data_1 to transmit
 2803:	  0A00	75 90 E2	MOV P1, #0E2H ; data_2 to receive
 2804:	  0A03	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2805:	  0A06	D2 9C		SETB 09CH ; REN active
 2806:	  0A08	C2 00		CLR 00h ; clear a bit in RAM
 2807:	  0A0A	75 99 6E	MOV SBUF, #06EH ; start transmition.
 2808:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 2809:	  0A0D	00		LABEL_TI_71: NOP ; loop until end of transmition
 2810:	  0A0E	30 00 FC	JNB 00h, LABEL_TI_71
 2811:	  0A11	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 2812:	  0A14	00		LABEL_RI_71: NOP ; loop until end of reception
 2813:	  0A15	20 00 FC	JB 00h, LABEL_RI_71
 2814:	  0A18	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 2815:	  0A1B	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 2816:	  0A1E	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 2817:	  0A21	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2818:
 2819:
 2820:
 2821:
 2822:
 2823:
 2824:
 2825:
 2826:
 2827:
 2828:
 2829:
 2830:
 2831:
 2832:
 2833:
 2834:
 2835:
 2836:
 2837:
 2838:
 2839:
 2840:
 2841:	  0A24	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 2842:	  0A27	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2843:	  0A2A	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 52



 Line  I  Addr  Code            Source

 2844:	  0A2D	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 2845:	  0A2F	00		NOP ; time for interrupt to be processed
 2846:	  0A30	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2847:	  0A33	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 2848:	  0A36	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2849:
 2850:
 2851:
 2852:
 2853:
 2854:
 2855:
 2856:
 2857:
 2858:
 2859:
 2860:
 2861:
 2862:
 2863:
 2864:
 2865:
 2866:
 2867:
 2868:
 2869:
 2870:
 2871:
 2872:
 2873:
 2874:
 2875:
 2876:
 2877:
 2878:
 2879:
 2880:
 2881:	  0A39	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2882:	  0A3C	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2883:				; moving FFFFFDh to 24bits Timer 2 counter
 2884:	  0A3F	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2885:	  0A42	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2886:	  0A45	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2887:	  0A48	C2 00		CLR 00h ; clear a bit in RAM
 2888:	  0A4A	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2889:	  0A4D	00		LABEL_TF2_73: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2890:	  0A4E	30 00 FC	JNB 00h, LABEL_TF2_73
 2891:	  0A51	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2892:	  0A54	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2893:	  0A57	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2894:	  0A5A	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2895:
 2896:
 2897:
 2898:
 2899:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 53



 Line  I  Addr  Code            Source

 2900:
 2901:
 2902:
 2903:
 2904:
 2905:
 2906:
 2907:
 2908:
 2909:
 2910:
 2911:
 2912:
 2913:
 2914:
 2915:
 2916:
 2917:
 2918:
 2919:
 2920:
 2921:	  0A5D	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 2922:	  0A60	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2923:				; moving FFFFFDh to 24bits Timer 2 counter
 2924:	  0A63	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 2925:	  0A66	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 2926:	  0A69	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 2927:	  0A6C	C2 00		CLR 00h ; clear a bit in RAM
 2928:	  0A6E	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 2929:	  0A71	00		LABEL_TF2_74: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 2930:	  0A72	30 00 FC	JNB 00h, LABEL_TF2_74
 2931:	  0A75	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2932:	  0A78	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 2933:	  0A7B	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 2934:	  0A7E	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2935:
 2936:
 2937:
 2938:
 2939:
 2940:
 2941:
 2942:
 2943:
 2944:
 2945:
 2946:
 2947:
 2948:
 2949:
 2950:
 2951:
 2952:
 2953:
 2954:
 2955:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 54



 Line  I  Addr  Code            Source

 2956:
 2957:
 2958:
 2959:
 2960:
 2961:	  0A81	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 2962:	  0A84	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 2963:	  0A87	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 2964:	  0A8A	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 2965:	  0A8D	00		NOP ; verification must stimulate external interrupt 0
 2966:	  0A8E	00		NOP ; verification must stimulate external interrupt 0
 2967:	  0A8F	00		NOP ; verification must stimulate external interrupt 0
 2968:	  0A90	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2969:	  0A93	00		NOP ; verification must stimulate external interrupt 1
 2970:	  0A94	00		NOP ; verification must stimulate external interrupt 1
 2971:	  0A95	00		NOP ; verification must stimulate external interrupt 1
 2972:	  0A96	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 2973:	  0A99	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 2974:	  0A9C	75 A8 00	MOV IE, #000H ; All interrupts disabled
 2975:	  0A9F	75 88 00	MOV TCON, #00H ; reset TCON
 2976:
 2977:
 2978:
 2979:
 2980:
 2981:
 2982:
 2983:
 2984:
 2985:
 2986:
 2987:
 2988:
 2989:
 2990:
 2991:
 2992:
 2993:
 2994:
 2995:
 2996:
 2997:
 2998:
 2999:
 3000:
 3001:	  0AA2	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3002:	  0AA5	75 90 8F	MOV P1, #08FH ; data_1 to transmit
 3003:	  0AA8	75 90 ED	MOV P1, #0EDH ; data_2 to receive
 3004:	  0AAB	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3005:	  0AAE	D2 9C		SETB 09CH ; REN active
 3006:	  0AB0	C2 00		CLR 00h ; clear a bit in RAM
 3007:	  0AB2	75 99 8F	MOV SBUF, #08FH ; start transmition.
 3008:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3009:	  0AB5	00		LABEL_TI_76: NOP ; loop until end of transmition
 3010:	  0AB6	30 00 FC	JNB 00h, LABEL_TI_76
 3011:	  0AB9	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 55



 Line  I  Addr  Code            Source

 3012:	  0ABC	00		LABEL_RI_76: NOP ; loop until end of reception
 3013:	  0ABD	20 00 FC	JB 00h, LABEL_RI_76
 3014:	  0AC0	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3015:	  0AC3	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3016:	  0AC6	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3017:	  0AC9	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3018:
 3019:
 3020:
 3021:
 3022:
 3023:
 3024:
 3025:
 3026:
 3027:
 3028:
 3029:
 3030:
 3031:
 3032:
 3033:
 3034:
 3035:
 3036:
 3037:
 3038:
 3039:
 3040:
 3041:	  0ACC	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3042:	  0ACF	75 90 DD	MOV P1, #0DDH ; data_1 to transmit
 3043:	  0AD2	75 90 9C	MOV P1, #09CH ; data_2 to receive
 3044:	  0AD5	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3045:	  0AD8	D2 9C		SETB 09CH ; REN active
 3046:	  0ADA	C2 00		CLR 00h ; clear a bit in RAM
 3047:	  0ADC	75 99 DD	MOV SBUF, #0DDH ; start transmition.
 3048:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3049:	  0ADF	00		LABEL_TI_77: NOP ; loop until end of transmition
 3050:	  0AE0	30 00 FC	JNB 00h, LABEL_TI_77
 3051:	  0AE3	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 3052:	  0AE6	00		LABEL_RI_77: NOP ; loop until end of reception
 3053:	  0AE7	20 00 FC	JB 00h, LABEL_RI_77
 3054:	  0AEA	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3055:	  0AED	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3056:	  0AF0	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3057:	  0AF3	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3058:
 3059:
 3060:
 3061:
 3062:
 3063:
 3064:
 3065:
 3066:
 3067:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 56



 Line  I  Addr  Code            Source

 3068:
 3069:
 3070:
 3071:
 3072:
 3073:
 3074:
 3075:
 3076:
 3077:
 3078:
 3079:
 3080:
 3081:	  0AF6	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 3082:	  0AF9	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3083:	  0AFC	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3084:	  0AFF	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 3085:	  0B02	00		NOP ; verification must stimulate external interrupt 0
 3086:	  0B03	00		NOP ; verification must stimulate external interrupt 0
 3087:	  0B04	00		NOP ; verification must stimulate external interrupt 0
 3088:	  0B05	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3089:	  0B08	00		NOP ; verification must stimulate external interrupt 1
 3090:	  0B09	00		NOP ; verification must stimulate external interrupt 1
 3091:	  0B0A	00		NOP ; verification must stimulate external interrupt 1
 3092:	  0B0B	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3093:	  0B0E	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 3094:	  0B11	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3095:	  0B14	75 88 00	MOV TCON, #00H ; reset TCON
 3096:
 3097:
 3098:
 3099:
 3100:
 3101:
 3102:
 3103:
 3104:
 3105:
 3106:
 3107:
 3108:
 3109:
 3110:
 3111:
 3112:
 3113:
 3114:
 3115:
 3116:
 3117:
 3118:
 3119:
 3120:
 3121:	  0B17	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3122:	  0B1A	75 90 A0	MOV P1, #0A0H ; data_1 to transmit
 3123:	  0B1D	75 90 A9	MOV P1, #0A9H ; data_2 to receive

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 57



 Line  I  Addr  Code            Source

 3124:	  0B20	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3125:	  0B23	D2 9C		SETB 09CH ; REN active
 3126:	  0B25	C2 00		CLR 00h ; clear a bit in RAM
 3127:	  0B27	75 99 A0	MOV SBUF, #0A0H ; start transmition.
 3128:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3129:	  0B2A	00		LABEL_TI_79: NOP ; loop until end of transmition
 3130:	  0B2B	30 00 FC	JNB 00h, LABEL_TI_79
 3131:	  0B2E	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 3132:	  0B31	00		LABEL_RI_79: NOP ; loop until end of reception
 3133:	  0B32	20 00 FC	JB 00h, LABEL_RI_79
 3134:	  0B35	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3135:	  0B38	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3136:	  0B3B	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3137:	  0B3E	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3138:
 3139:
 3140:
 3141:
 3142:
 3143:
 3144:
 3145:
 3146:
 3147:
 3148:
 3149:
 3150:
 3151:
 3152:
 3153:
 3154:
 3155:
 3156:
 3157:
 3158:
 3159:
 3160:
 3161:	  0B41	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3162:	  0B44	75 90 94	MOV P1, #094H ; data_1 to transmit
 3163:	  0B47	75 90 04	MOV P1, #04H ; data_2 to receive
 3164:	  0B4A	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3165:	  0B4D	D2 9C		SETB 09CH ; REN active
 3166:	  0B4F	C2 00		CLR 00h ; clear a bit in RAM
 3167:	  0B51	75 99 94	MOV SBUF, #094H ; start transmition.
 3168:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3169:	  0B54	00		LABEL_TI_80: NOP ; loop until end of transmition
 3170:	  0B55	30 00 FC	JNB 00h, LABEL_TI_80
 3171:	  0B58	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 3172:	  0B5B	00		LABEL_RI_80: NOP ; loop until end of reception
 3173:	  0B5C	20 00 FC	JB 00h, LABEL_RI_80
 3174:	  0B5F	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3175:	  0B62	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3176:	  0B65	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3177:	  0B68	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3178:
 3179:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 58



 Line  I  Addr  Code            Source

 3180:
 3181:
 3182:
 3183:
 3184:
 3185:
 3186:
 3187:
 3188:
 3189:
 3190:
 3191:
 3192:
 3193:
 3194:
 3195:
 3196:
 3197:
 3198:
 3199:
 3200:
 3201:	  0B6B	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 3202:	  0B6E	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3203:	  0B71	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3204:	  0B74	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 3205:	  0B76	00		NOP ; time for interrupt to be processed
 3206:	  0B77	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3207:	  0B7A	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 3208:	  0B7D	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3209:
 3210:
 3211:
 3212:
 3213:
 3214:
 3215:
 3216:
 3217:
 3218:
 3219:
 3220:
 3221:
 3222:
 3223:
 3224:
 3225:
 3226:
 3227:
 3228:
 3229:
 3230:
 3231:
 3232:
 3233:
 3234:
 3235:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 59



 Line  I  Addr  Code            Source

 3236:
 3237:
 3238:
 3239:
 3240:
 3241:	  0B80	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 3242:	  0B83	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3243:	  0B86	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3244:	  0B89	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 3245:	  0B8C	00		NOP ; verification must stimulate external interrupt 0
 3246:	  0B8D	00		NOP ; verification must stimulate external interrupt 0
 3247:	  0B8E	00		NOP ; verification must stimulate external interrupt 0
 3248:	  0B8F	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3249:	  0B92	00		NOP ; verification must stimulate external interrupt 1
 3250:	  0B93	00		NOP ; verification must stimulate external interrupt 1
 3251:	  0B94	00		NOP ; verification must stimulate external interrupt 1
 3252:	  0B95	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3253:	  0B98	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 3254:	  0B9B	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3255:	  0B9E	75 88 00	MOV TCON, #00H ; reset TCON
 3256:
 3257:
 3258:
 3259:
 3260:
 3261:
 3262:
 3263:
 3264:
 3265:
 3266:
 3267:
 3268:
 3269:
 3270:
 3271:
 3272:
 3273:
 3274:
 3275:
 3276:
 3277:
 3278:
 3279:
 3280:
 3281:	  0BA1	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3282:	  0BA4	75 90 7F	MOV P1, #07FH ; data_1 to transmit
 3283:	  0BA7	75 90 89	MOV P1, #089H ; data_2 to receive
 3284:	  0BAA	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3285:	  0BAD	D2 9C		SETB 09CH ; REN active
 3286:	  0BAF	C2 00		CLR 00h ; clear a bit in RAM
 3287:	  0BB1	75 99 7F	MOV SBUF, #07FH ; start transmition.
 3288:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3289:	  0BB4	00		LABEL_TI_83: NOP ; loop until end of transmition
 3290:	  0BB5	30 00 FC	JNB 00h, LABEL_TI_83
 3291:	  0BB8	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 60



 Line  I  Addr  Code            Source

 3292:	  0BBB	00		LABEL_RI_83: NOP ; loop until end of reception
 3293:	  0BBC	20 00 FC	JB 00h, LABEL_RI_83
 3294:	  0BBF	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3295:	  0BC2	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3296:	  0BC5	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3297:	  0BC8	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3298:
 3299:
 3300:
 3301:
 3302:
 3303:
 3304:
 3305:
 3306:
 3307:
 3308:
 3309:
 3310:
 3311:
 3312:
 3313:
 3314:
 3315:
 3316:
 3317:
 3318:
 3319:
 3320:
 3321:	  0BCB	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 3322:	  0BCE	75 90 A3	MOV P1, #0A3H
 3323:	  0BD1	75 90 6A	MOV P1, #06AH
 3324:	  0BD4	75 90 35	MOV P1, #035H
 3325:				; PORT 0 VERIFICATION
 3326:	  0BD7	75 C0 A3	MOV 0C0H, #0A3H ; P0EN <- data_1
 3327:	  0BDA	75 80 6A	MOV P0, #06AH ; verify if p0_a == data_2
 3328:				; verification: stimulate p0_y <- data_3
 3329:				; PORT 1 VERIFICATION
 3330:	  0BDD	75 C8 35	MOV 0C8H, #035H ; P1EN <- data_3
 3331:	  0BE0	75 90 6A	MOV P1, #06AH ; verify if p1_a == data_2
 3332:				; verification: stimulate p1_y <- data_1
 3333:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 3334:				; PORT 2 VERIFICATION
 3335:	  0BE3	75 E8 A3	MOV 0E8H, #0A3H ; P2EN <- data_1
 3336:	  0BE6	75 A0 35	MOV P2, #035H ; verify if p2_a == data_3
 3337:				; verification: stimulate p2_y <- data_2
 3338:				; PORT 3 VERIFICATION
 3339:	  0BE9	75 F8 6A	MOV 0F8H, #06AH ; P0EN <- data_2
 3340:	  0BEC	75 B0 A3	MOV P3, #0A3H ; verify if p3_a == data_1
 3341:				; verification: stimulate p3_y <- data_3
 3342:				; PORT 4 VERIFICATION
 3343:	  0BEF	75 AF 35	MOV 0AFH, #035H ; verify if p4_a == data_3
 3344:	  0BF2	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 3345:	  0BF5	00		NOP ; synchronization
 3346:
 3347:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 61



 Line  I  Addr  Code            Source

 3348:
 3349:
 3350:
 3351:
 3352:
 3353:
 3354:
 3355:
 3356:
 3357:
 3358:
 3359:
 3360:
 3361:	  0BF6	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 3362:	  0BF9	75 90 9E	MOV P1, #09EH
 3363:	  0BFC	75 90 92	MOV P1, #092H
 3364:	  0BFF	75 90 0D	MOV P1, #0DH
 3365:				; PORT 0 VERIFICATION
 3366:	  0C02	75 C0 9E	MOV 0C0H, #09EH ; P0EN <- data_1
 3367:	  0C05	75 80 92	MOV P0, #092H ; verify if p0_a == data_2
 3368:				; verification: stimulate p0_y <- data_3
 3369:				; PORT 1 VERIFICATION
 3370:	  0C08	75 C8 0D	MOV 0C8H, #0DH ; P1EN <- data_3
 3371:	  0C0B	75 90 92	MOV P1, #092H ; verify if p1_a == data_2
 3372:				; verification: stimulate p1_y <- data_1
 3373:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 3374:				; PORT 2 VERIFICATION
 3375:	  0C0E	75 E8 9E	MOV 0E8H, #09EH ; P2EN <- data_1
 3376:	  0C11	75 A0 0D	MOV P2, #0DH ; verify if p2_a == data_3
 3377:				; verification: stimulate p2_y <- data_2
 3378:				; PORT 3 VERIFICATION
 3379:	  0C14	75 F8 92	MOV 0F8H, #092H ; P0EN <- data_2
 3380:	  0C17	75 B0 9E	MOV P3, #09EH ; verify if p3_a == data_1
 3381:				; verification: stimulate p3_y <- data_3
 3382:				; PORT 4 VERIFICATION
 3383:	  0C1A	75 AF 0D	MOV 0AFH, #0DH ; verify if p4_a == data_3
 3384:	  0C1D	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 3385:	  0C20	00		NOP ; synchronization
 3386:
 3387:
 3388:
 3389:
 3390:
 3391:
 3392:
 3393:
 3394:
 3395:
 3396:
 3397:
 3398:
 3399:
 3400:
 3401:	  0C21	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3402:	  0C24	75 90 10	MOV P1, #010H ; data_1 to transmit
 3403:	  0C27	75 90 DB	MOV P1, #0DBH ; data_2 to receive

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 62



 Line  I  Addr  Code            Source

 3404:	  0C2A	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3405:	  0C2D	D2 9C		SETB 09CH ; REN active
 3406:	  0C2F	C2 00		CLR 00h ; clear a bit in RAM
 3407:	  0C31	75 99 10	MOV SBUF, #010H ; start transmition.
 3408:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3409:	  0C34	00		LABEL_TI_86: NOP ; loop until end of transmition
 3410:	  0C35	30 00 FC	JNB 00h, LABEL_TI_86
 3411:	  0C38	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 3412:	  0C3B	00		LABEL_RI_86: NOP ; loop until end of reception
 3413:	  0C3C	20 00 FC	JB 00h, LABEL_RI_86
 3414:	  0C3F	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3415:	  0C42	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3416:	  0C45	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3417:	  0C48	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3418:
 3419:
 3420:
 3421:
 3422:
 3423:
 3424:
 3425:
 3426:
 3427:
 3428:
 3429:
 3430:
 3431:
 3432:
 3433:
 3434:
 3435:
 3436:
 3437:
 3438:
 3439:
 3440:
 3441:	  0C4B	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 3442:	  0C4E	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3443:	  0C51	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3444:	  0C54	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 3445:	  0C57	00		NOP ; verification must stimulate external interrupt 0
 3446:	  0C58	00		NOP ; verification must stimulate external interrupt 0
 3447:	  0C59	00		NOP ; verification must stimulate external interrupt 0
 3448:	  0C5A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3449:	  0C5D	00		NOP ; verification must stimulate external interrupt 1
 3450:	  0C5E	00		NOP ; verification must stimulate external interrupt 1
 3451:	  0C5F	00		NOP ; verification must stimulate external interrupt 1
 3452:	  0C60	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3453:	  0C63	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 3454:	  0C66	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3455:	  0C69	75 88 00	MOV TCON, #00H ; reset TCON
 3456:
 3457:
 3458:
 3459:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 63



 Line  I  Addr  Code            Source

 3460:
 3461:
 3462:
 3463:
 3464:
 3465:
 3466:
 3467:
 3468:
 3469:
 3470:
 3471:
 3472:
 3473:
 3474:
 3475:
 3476:
 3477:
 3478:
 3479:
 3480:
 3481:	  0C6C	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 3482:	  0C6F	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3483:	  0C72	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3484:	  0C75	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 3485:	  0C77	00		NOP ; time for interrupt to be processed
 3486:	  0C78	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3487:	  0C7B	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 3488:	  0C7E	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3489:
 3490:
 3491:
 3492:
 3493:
 3494:
 3495:
 3496:
 3497:
 3498:
 3499:
 3500:
 3501:
 3502:
 3503:
 3504:
 3505:
 3506:
 3507:
 3508:
 3509:
 3510:
 3511:
 3512:
 3513:
 3514:
 3515:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 64



 Line  I  Addr  Code            Source

 3516:
 3517:
 3518:
 3519:
 3520:
 3521:	  0C81	75 90 A1	MOV P1, #0A1H ; PORTS FUNCTIONALITY
 3522:	  0C84	75 90 54	MOV P1, #054H
 3523:	  0C87	75 90 E5	MOV P1, #0E5H
 3524:	  0C8A	75 90 1E	MOV P1, #01EH
 3525:				; PORT 0 VERIFICATION
 3526:	  0C8D	75 C0 54	MOV 0C0H, #054H ; P0EN <- data_1
 3527:	  0C90	75 80 E5	MOV P0, #0E5H ; verify if p0_a == data_2
 3528:				; verification: stimulate p0_y <- data_3
 3529:				; PORT 1 VERIFICATION
 3530:	  0C93	75 C8 1E	MOV 0C8H, #01EH ; P1EN <- data_3
 3531:	  0C96	75 90 E5	MOV P1, #0E5H ; verify if p1_a == data_2
 3532:				; verification: stimulate p1_y <- data_1
 3533:				; verify if P1 is a merge of data_1 and data_2, controled by data_3
 3534:				; PORT 2 VERIFICATION
 3535:	  0C99	75 E8 54	MOV 0E8H, #054H ; P2EN <- data_1
 3536:	  0C9C	75 A0 1E	MOV P2, #01EH ; verify if p2_a == data_3
 3537:				; verification: stimulate p2_y <- data_2
 3538:				; PORT 3 VERIFICATION
 3539:	  0C9F	75 F8 E5	MOV 0F8H, #0E5H ; P0EN <- data_2
 3540:	  0CA2	75 B0 54	MOV P3, #054H ; verify if p3_a == data_1
 3541:				; verification: stimulate p3_y <- data_3
 3542:				; PORT 4 VERIFICATION
 3543:	  0CA5	75 AF 1E	MOV 0AFH, #01EH ; verify if p4_a == data_3
 3544:	  0CA8	75 C8 FF	MOV 0C8H, #0FFH ; Setting P1EN - output
 3545:	  0CAB	00		NOP ; synchronization
 3546:
 3547:
 3548:
 3549:
 3550:
 3551:
 3552:
 3553:
 3554:
 3555:
 3556:
 3557:
 3558:
 3559:
 3560:
 3561:	  0CAC	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3562:	  0CAF	75 90 FF	MOV P1, #0FFH ; data_1 to transmit
 3563:	  0CB2	75 90 49	MOV P1, #049H ; data_2 to receive
 3564:	  0CB5	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3565:	  0CB8	D2 9C		SETB 09CH ; REN active
 3566:	  0CBA	C2 00		CLR 00h ; clear a bit in RAM
 3567:	  0CBC	75 99 FF	MOV SBUF, #0FFH ; start transmition.
 3568:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3569:	  0CBF	00		LABEL_TI_90: NOP ; loop until end of transmition
 3570:	  0CC0	30 00 FC	JNB 00h, LABEL_TI_90
 3571:	  0CC3	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 65



 Line  I  Addr  Code            Source

 3572:	  0CC6	00		LABEL_RI_90: NOP ; loop until end of reception
 3573:	  0CC7	20 00 FC	JB 00h, LABEL_RI_90
 3574:	  0CCA	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3575:	  0CCD	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3576:	  0CD0	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3577:	  0CD3	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3578:
 3579:
 3580:
 3581:
 3582:
 3583:
 3584:
 3585:
 3586:
 3587:
 3588:
 3589:
 3590:
 3591:
 3592:
 3593:
 3594:
 3595:
 3596:
 3597:
 3598:
 3599:
 3600:
 3601:	  0CD6	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 3602:	  0CD9	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3603:	  0CDC	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3604:	  0CDF	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 3605:	  0CE2	00		NOP ; verification must stimulate external interrupt 0
 3606:	  0CE3	00		NOP ; verification must stimulate external interrupt 0
 3607:	  0CE4	00		NOP ; verification must stimulate external interrupt 0
 3608:	  0CE5	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3609:	  0CE8	00		NOP ; verification must stimulate external interrupt 1
 3610:	  0CE9	00		NOP ; verification must stimulate external interrupt 1
 3611:	  0CEA	00		NOP ; verification must stimulate external interrupt 1
 3612:	  0CEB	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3613:	  0CEE	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 3614:	  0CF1	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3615:	  0CF4	75 88 00	MOV TCON, #00H ; reset TCON
 3616:
 3617:
 3618:
 3619:
 3620:
 3621:
 3622:
 3623:
 3624:
 3625:
 3626:
 3627:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 66



 Line  I  Addr  Code            Source

 3628:
 3629:
 3630:
 3631:
 3632:
 3633:
 3634:
 3635:
 3636:
 3637:
 3638:
 3639:
 3640:
 3641:	  0CF7	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 3642:	  0CFA	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3643:				; moving FFFFFDh to 24bits Timer 2 counter
 3644:	  0CFD	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 3645:	  0D00	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 3646:	  0D03	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 3647:	  0D06	C2 00		CLR 00h ; clear a bit in RAM
 3648:	  0D08	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 3649:	  0D0B	00		LABEL_TF2_92: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 3650:	  0D0C	30 00 FC	JNB 00h, LABEL_TF2_92
 3651:	  0D0F	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3652:	  0D12	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 3653:	  0D15	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 3654:	  0D18	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3655:
 3656:
 3657:
 3658:
 3659:
 3660:
 3661:
 3662:
 3663:
 3664:
 3665:
 3666:
 3667:
 3668:
 3669:
 3670:
 3671:
 3672:
 3673:
 3674:
 3675:
 3676:
 3677:
 3678:
 3679:
 3680:
 3681:	  0D1B	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 3682:	  0D1E	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3683:	  0D21	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 67



 Line  I  Addr  Code            Source

 3684:	  0D24	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 3685:	  0D27	00		NOP ; verification must stimulate external interrupt 0
 3686:	  0D28	00		NOP ; verification must stimulate external interrupt 0
 3687:	  0D29	00		NOP ; verification must stimulate external interrupt 0
 3688:	  0D2A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3689:	  0D2D	00		NOP ; verification must stimulate external interrupt 1
 3690:	  0D2E	00		NOP ; verification must stimulate external interrupt 1
 3691:	  0D2F	00		NOP ; verification must stimulate external interrupt 1
 3692:	  0D30	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3693:	  0D33	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 3694:	  0D36	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3695:	  0D39	75 88 00	MOV TCON, #00H ; reset TCON
 3696:
 3697:
 3698:
 3699:
 3700:
 3701:
 3702:
 3703:
 3704:
 3705:
 3706:
 3707:
 3708:
 3709:
 3710:
 3711:
 3712:
 3713:
 3714:
 3715:
 3716:
 3717:
 3718:
 3719:
 3720:
 3721:	  0D3C	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 3722:	  0D3F	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3723:	  0D42	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3724:	  0D45	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 3725:	  0D47	00		NOP ; time for interrupt to be processed
 3726:	  0D48	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3727:	  0D4B	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 3728:	  0D4E	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3729:
 3730:
 3731:
 3732:
 3733:
 3734:
 3735:
 3736:
 3737:
 3738:
 3739:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 68



 Line  I  Addr  Code            Source

 3740:
 3741:
 3742:
 3743:
 3744:
 3745:
 3746:
 3747:
 3748:
 3749:
 3750:
 3751:
 3752:
 3753:
 3754:
 3755:
 3756:
 3757:
 3758:
 3759:
 3760:
 3761:	  0D51	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 3762:	  0D54	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3763:				; moving FFFFFDh to 24bits Timer 2 counter
 3764:	  0D57	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 3765:	  0D5A	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 3766:	  0D5D	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 3767:	  0D60	C2 00		CLR 00h ; clear a bit in RAM
 3768:	  0D62	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 3769:	  0D65	00		LABEL_TF2_95: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 3770:	  0D66	30 00 FC	JNB 00h, LABEL_TF2_95
 3771:	  0D69	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3772:	  0D6C	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 3773:	  0D6F	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 3774:	  0D72	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3775:
 3776:
 3777:
 3778:
 3779:
 3780:
 3781:
 3782:
 3783:
 3784:
 3785:
 3786:
 3787:
 3788:
 3789:
 3790:
 3791:
 3792:
 3793:
 3794:
 3795:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 69



 Line  I  Addr  Code            Source

 3796:
 3797:
 3798:
 3799:
 3800:
 3801:	  0D75	75 90 41	MOV P1, #41H ; INTERRUPT FUNCIONALITY - External interrupts
 3802:	  0D78	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3803:	  0D7B	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3804:	  0D7E	75 88 01	MOV TCON, #001H ; External int. 0: by edge | External int 1: by level
 3805:	  0D81	00		NOP ; verification must stimulate external interrupt 0
 3806:	  0D82	00		NOP ; verification must stimulate external interrupt 0
 3807:	  0D83	00		NOP ; verification must stimulate external interrupt 0
 3808:	  0D84	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3809:	  0D87	00		NOP ; verification must stimulate external interrupt 1
 3810:	  0D88	00		NOP ; verification must stimulate external interrupt 1
 3811:	  0D89	00		NOP ; verification must stimulate external interrupt 1
 3812:	  0D8A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3813:	  0D8D	85 88 90	MOV P1, TCON ; verify if IE1 (bit 3) and IE0 (bit 1) are cleared
 3814:	  0D90	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3815:	  0D93	75 88 00	MOV TCON, #00H ; reset TCON
 3816:
 3817:
 3818:
 3819:
 3820:
 3821:
 3822:
 3823:
 3824:
 3825:
 3826:
 3827:
 3828:
 3829:
 3830:
 3831:
 3832:
 3833:
 3834:
 3835:
 3836:
 3837:
 3838:
 3839:
 3840:
 3841:	  0D96	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 3842:	  0D99	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3843:				; moving FFFFFDh to 24bits Timer 2 counter
 3844:	  0D9C	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 3845:	  0D9F	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 3846:	  0DA2	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 3847:	  0DA5	C2 00		CLR 00h ; clear a bit in RAM
 3848:	  0DA7	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 3849:	  0DAA	00		LABEL_TF2_97: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 3850:	  0DAB	30 00 FC	JNB 00h, LABEL_TF2_97
 3851:	  0DAE	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 70



 Line  I  Addr  Code            Source

 3852:	  0DB1	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 3853:	  0DB4	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 3854:	  0DB7	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3855:
 3856:
 3857:
 3858:
 3859:
 3860:
 3861:
 3862:
 3863:
 3864:
 3865:
 3866:
 3867:
 3868:
 3869:
 3870:
 3871:
 3872:
 3873:
 3874:
 3875:
 3876:
 3877:
 3878:
 3879:
 3880:
 3881:	  0DBA	75 90 21	MOV P1, #21H ; INTERRUPT FUNCIONALITY - TXRX
 3882:	  0DBD	75 B8 00	MOV IP, #000H ; All interrupts with low priority
 3883:	  0DC0	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3884:	  0DC3	D2 DF		SETB 0DFH ; set interrupt flag(TXRX)
 3885:	  0DC5	00		NOP ; time for interrupt to be processed
 3886:	  0DC6	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3887:	  0DC9	85 D8 90	MOV P1, 0D8H ; verify if TXRX flag (bit 7) is cleared
 3888:	  0DCC	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3889:
 3890:
 3891:
 3892:
 3893:
 3894:
 3895:
 3896:
 3897:
 3898:
 3899:
 3900:
 3901:
 3902:
 3903:
 3904:
 3905:
 3906:
 3907:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 71



 Line  I  Addr  Code            Source

 3908:
 3909:
 3910:
 3911:
 3912:
 3913:
 3914:
 3915:
 3916:
 3917:
 3918:
 3919:
 3920:
 3921:	  0DCF	75 90 61	MOV P1, #61H ; TIMER 2 FUNCTIONALITY AND INTERRUPT
 3922:	  0DD2	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3923:				; moving FFFFFDh to 24bits Timer 2 counter
 3924:	  0DD5	75 86 FF	MOV 086H, #0FFH ; move FFh to TH0
 3925:	  0DD8	75 85 FF	MOV 085H, #0FFH ; move FFh to TM0
 3926:	  0DDB	75 84 FD	MOV 084H, #0FDH ; move FDh to TL0
 3927:	  0DDE	C2 00		CLR 00h ; clear a bit in RAM
 3928:	  0DE0	75 D8 43	MOV 0D8H, #043H ; TCON2: Rise edge, 3 samples (mode S3) and run timer 2
 3929:	  0DE3	00		LABEL_TF2_99: NOP ; loop until timer 2 overflow (verification must stimulate PHT)
 3930:	  0DE4	30 00 FC	JNB 00h, LABEL_TF2_99
 3931:	  0DE7	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (verify it)
 3932:	  0DEA	85 D8 90	MOV P1, 0D8H ; TCON2: verify if TF2 flag (bit 5) is cleared
 3933:	  0DED	75 D8 00	MOV 0D8H, #000H ; TCON2 reset
 3934:	  0DF0	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3935:
 3936:
 3937:
 3938:
 3939:
 3940:
 3941:
 3942:
 3943:
 3944:
 3945:
 3946:
 3947:
 3948:
 3949:
 3950:
 3951:
 3952:
 3953:
 3954:
 3955:
 3956:
 3957:
 3958:
 3959:
 3960:
 3961:	  0DF3	75 90 81	MOV P1, #81H ; SERIAL FUNCTIONALITY AND INTERRUPT
 3962:	  0DF6	75 90 CC	MOV P1, #0CCH ; data_1 to transmit
 3963:	  0DF9	75 90 BB	MOV P1, #0BBH ; data_2 to receive

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 72



 Line  I  Addr  Code            Source

 3964:	  0DFC	75 A8 FF	MOV IE, #0FFH ; All interrupts enabled
 3965:	  0DFF	D2 9C		SETB 09CH ; REN active
 3966:	  0E01	C2 00		CLR 00h ; clear a bit in RAM
 3967:	  0E03	75 99 CC	MOV SBUF, #0CCH ; start transmition.
 3968:				; during transmition, verification must stimulate reception, with a start bit and then data_2
 3969:	  0E06	00		LABEL_TI_100: NOP ; loop until end of transmition
 3970:	  0E07	30 00 FC	JNB 00h, LABEL_TI_100
 3971:	  0E0A	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (TI) - verify bits transmited
 3972:	  0E0D	00		LABEL_RI_100: NOP ; loop until end of reception
 3973:	  0E0E	20 00 FC	JB 00h, LABEL_RI_100
 3974:	  0E11	75 90 FE	MOV P1, #0FEH ; inform JMP BACK OK (RI)
 3975:	  0E14	85 99 90	MOV P1, SBUF ; check if SBUF == data_2
 3976:	  0E17	75 98 80	MOV SCON, #080H ; clear flags and disable REN
 3977:	  0E1A	75 A8 00	MOV IE, #000H ; All interrupts disabled
 3978:
 3979:
 3980:
 3981:
 3982:
 3983:
 3984:
 3985:
 3986:
 3987:
 3988:
 3989:
 3990:
 3991:
 3992:
 3993:
 3994:
 3995:
 3996:
 3997:
 3998:
 3999:
 4000:
 4001:				END
 4002:
 4003:
 4004:
 4005:
 4006:
 4007:
 4008:
 4009:
 4010:
 4011:
 4012:
 4013:
 4014:
 4015:
 4016:
 4017:
 4018:
 4019:

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 73



 Line  I  Addr  Code            Source

 4020:
 4021:
 4022:
 4023:
 4024:
 4025:
 4026:
 4027:
 4028:
 4029:
 4030:
 4031:
 4032:
 4033:
 4034:
 4035:
 4036:
 4037:
 4038:
 4039:
 4040:





                     register banks used:  ---

                     no errors




ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 74





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
??ASEM_51			  NUMBER    8051
??VERSION			  NUMBER    0130
AC				  BIT	      D6
ACC				  DATA	      E0
B				  DATA	      F0
CY				  BIT	      D7
DPH				  DATA	      83
DPL				  DATA	      82
EA				  BIT	      AF
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
F0				  BIT	      D5
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
INITIAL				  CODE	    0053	  38
INT0				  BIT	      B2
INT1				  BIT	      B3
IP				  DATA	      B8
IT0				  BIT	      88
IT1				  BIT	      8A
LABEL_RI_100			  CODE	    0E0D	3972
LABEL_RI_11			  CODE	    01C7	 412
LABEL_RI_2			  CODE	    0076	  52
LABEL_RI_23			  CODE	    0373	 892
LABEL_RI_25			  CODE	    03C8	 972
LABEL_RI_26			  CODE	    03F2	1012
LABEL_RI_27			  CODE	    041C	1052
LABEL_RI_3			  CODE	    00A0	  92
LABEL_RI_4			  CODE	    00CA	 132
LABEL_RI_52			  CODE	    0770	2052
LABEL_RI_63			  CODE	    08E1	2492
LABEL_RI_67			  CODE	    097B	2652
LABEL_RI_69			  CODE	    09C9	2732
LABEL_RI_71			  CODE	    0A14	2812
LABEL_RI_76			  CODE	    0ABC	3012
LABEL_RI_77			  CODE	    0AE6	3052
LABEL_RI_79			  CODE	    0B31	3132
LABEL_RI_80			  CODE	    0B5B	3172
LABEL_RI_83			  CODE	    0BBB	3292
LABEL_RI_86			  CODE	    0C3B	3412
LABEL_RI_9			  CODE	    0179	 332
LABEL_RI_90			  CODE	    0CC6	3572
LABEL_RI_TI			  CODE	    004A	  33
LABEL_TF0			  CODE	    003B	  24

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 75



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LABEL_TF2_10			  CODE	    019D	 369
LABEL_TF2_29			  CODE	    0455	1129
LABEL_TF2_35			  CODE	    0504	1369
LABEL_TF2_36			  CODE	    0528	1409
LABEL_TF2_39			  CODE	    0597	1529
LABEL_TF2_41			  CODE	    05F1	1609
LABEL_TF2_48			  CODE	    06D6	1889
LABEL_TF2_51			  CODE	    0746	2009
LABEL_TF2_54			  CODE	    07CA	2129
LABEL_TF2_55			  CODE	    07EE	2169
LABEL_TF2_56			  CODE	    0812	2209
LABEL_TF2_62			  CODE	    08B7	2449
LABEL_TF2_64			  CODE	    0905	2529
LABEL_TF2_68			  CODE	    099F	2689
LABEL_TF2_73			  CODE	    0A4D	2889
LABEL_TF2_74			  CODE	    0A71	2929
LABEL_TF2_8			  CODE	    014F	 289
LABEL_TF2_92			  CODE	    0D0B	3649
LABEL_TF2_95			  CODE	    0D65	3769
LABEL_TF2_97			  CODE	    0DAA	3849
LABEL_TF2_99			  CODE	    0DE3	3929
LABEL_TI_100			  CODE	    0E06	3969
LABEL_TI_11			  CODE	    01C0	 409
LABEL_TI_2			  CODE	    006F	  49
LABEL_TI_23			  CODE	    036C	 889
LABEL_TI_25			  CODE	    03C1	 969
LABEL_TI_26			  CODE	    03EB	1009
LABEL_TI_27			  CODE	    0415	1049
LABEL_TI_3			  CODE	    0099	  89
LABEL_TI_4			  CODE	    00C3	 129
LABEL_TI_52			  CODE	    0769	2049
LABEL_TI_63			  CODE	    08DA	2489
LABEL_TI_67			  CODE	    0974	2649
LABEL_TI_69			  CODE	    09C2	2729
LABEL_TI_71			  CODE	    0A0D	2809
LABEL_TI_76			  CODE	    0AB5	3009
LABEL_TI_77			  CODE	    0ADF	3049
LABEL_TI_79			  CODE	    0B2A	3129
LABEL_TI_80			  CODE	    0B54	3169
LABEL_TI_83			  CODE	    0BB4	3289
LABEL_TI_86			  CODE	    0C34	3409
LABEL_TI_9			  CODE	    0172	 329
LABEL_TI_90			  CODE	    0CBF	3569
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PCON				  DATA	      87
PS				  BIT	      BC
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PX0				  BIT	      B8
PX1				  BIT	      BA

ASEM-51 V1.3                                        Copyright (c) 2002 by W.W. Heinz                                         PAGE 76



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
RB8				  BIT	      9A
RD				  BIT	      B7
REN				  BIT	      9C
RESET				  CODE	    0000
RI				  BIT	      98
RS0				  BIT	      D3
RS1				  BIT	      D4
RXD				  BIT	      B0
SBUF				  DATA	      99
SCON				  DATA	      98
SINT				  CODE	    0023
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SP				  DATA	      81
T0				  BIT	      B4
T1				  BIT	      B5
TB8				  BIT	      9B
TCON				  DATA	      88
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TR0				  BIT	      8C
TR1				  BIT	      8E
TXD				  BIT	      B1
WR				  BIT	      B6
