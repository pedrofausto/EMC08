 #  Generated by Cadence Encounter(r) RTL Compiler v07.20-p004_1
 #---------------------------------------------------------------------------------  
 #                   CheckTSVlog - checks TSV log to look for conditions  
 #                                 that might require special options for ATPG  
 #---------------------------------------------------------------------------------  
 CheckTSVlog ()  
 {  
   
   # Set this keyword to no for now  
   CONTINUE_WITH_SEVERE="no"  
   
   lf="$1"  
   egrep "TSV-369|TSV-370|TSV-381" $lf | grep "^INFO"  
   TSV_error=`grep "^WARNING (TSV-384)" $lf | tail -1 | awk -F " " '{print $1}' 2>/dev/null`  
   
   if [ -n "${TSV_error}" ] ; then  
     echo " "  
     echo "$TSV_error messages indicate the following scan chains are broken. "  
     echo " "  
     egrep "TSV-385|TSV-384" $lf   
     if [ $CONTINUE_WITH_SEVERE = "yes" ] ; then  
       echo "Setup file specifies CONTINUE_WITH_SEVERE=yes."  
       echo "Continuing. Please review details in log file:"  
       echo "  $lf "  
       echo " "  
     else  
       echo " "  
       echo "EXITING. Please review details in log file:"  
       echo "  $lf "  
       echo " "  
       exit  
     fi  
   fi  
   
   # Check for contention issues and set contentionreport appropriately.  
   #  
   TSV_error=`egrep "TSV-093|TSV-193" $lf | grep "^WARNING" | tail -1 | awk -F " " '{print $1}' 2>/dev/null`  
   if [ -n "${TSV_error}" ] ; then  
     echo "$TSV_error messages indicate possible contention (soft or hard).   "  
     echo "ATPG will continue using contentionreport=hard to ignore potential "  
     echo "soft contention due to black box outputs or other X-sources.       "  
     echo "If this is not desired, set contentionreport=soft in ATPG.         "  
     echo "Please review details in log file:                                 "  
     echo "  $lf "  
     echo " "  
     if [ -n "${CONTENTION}" ] ; then  
       # do nothing  
       z=1  
     else  
       CONTENTION=hard  
       MULTICLOCK=yes  
       export CONTENTION MULTICLOCK  
     fi  
   fi  
   
   # Check for clock chopper issues and simulate choppers risky if necessary.  
   #  
   TSV_error=`egrep "TSV-021|TSV-025|TSV-029|TSV-037|TSV-038|TSV-039|TSV-044|TSV-045|TSV-046" $lf   
   | grep "^WARNING" | tail -1 | awk -F " " '{print $1}' 2>/dev/null`  
   if [ -n "${TSV_error}" ] ; then  
     echo "$TSV_error messages indicate possible invalid clock shapers (choppers)."  
     echo "ATPG will continue using choppers=risky to simulate them for highest   "  
     echo "coverage.  If this is not desired, set choppers=safe in ATPG           "  
     echo "Please review details in log file:                                     "  
     echo "  $lf "  
     echo " "  
     if [ -n "${CHOPPERS}" ] ; then  
       # do nothing  
       z=1  
     else  
       CHOPPERS=risky  
       export CHOPPERS  
     fi  
   fi  
   
   # Check for keeper issues and simulate keepers risky if necessary.  
   #  
   TSV_error=`egrep "TSV-034|TSV-035" $lf   
   | grep "^WARNING" | tail -1 | awk -F " " '{print $1}' 2>/dev/null`  
   if [ -n "${TSV_error}" ] ; then  
     echo "$TSV_error messages indicate possible invalid keeper devices."  
     echo "ATPG will continue using keepers=risky to simulate them for highest   "  
     echo "coverage.  If this is not desired, set keepers=safe in ATPG           "  
     echo "Please review details in log file:                                     "  
     echo "  $lf "  
     echo " "  
     if [ -n "${KEEPERS}" ] ; then  
       # do nothing  
       z=1  
     else  
       KEEPERS=risky  
       export KEEPERS  
     fi  
   fi  
   
   # Check for infinitex issues and set infinitex=none if necessary.  
   #  
   TSV_error=`egrep "TSV-059|TSV-310|TSV-008" $lf   
   | grep "^WARNING" | tail -1 | awk -F " " '{print $1}' 2>/dev/null`  
   if [ -n "${TSV_error}" ] ; then  
     echo "$TSV_error messages indicate design guideline violations.              "  
     echo "ATPG will continue using infinitex=none to simulate for highest        "  
     echo "coverage.  If this is not desired, set infinitex appropriately in ATPG "  
     echo "Please review details in log file:                                     "  
     echo "  $lf "  
     echo " "  
     if [ -n "${INFINITEX}" ] ; then  
       # do nothing  
       z=1  
     else  
       INIFINITEX=none  
       export INFINITEX  
     fi  
   fi  
 }  
   
   
 #----------------------------------------------------------------------------------  
 # 		CheckLogs:	Check Return Code from the Logs  
 #----------------------------------------------------------------------------------  
 CheckLogs ()  
 {  
   rcode="$1"  
   logdir="$WORKDIR/testresults/logs"  
   logfile="$2"  
   step=$2  
   #echo "Application returned code $rcode in $logdir/$logfile"  
   
   if [ -f "$logdir/$logfile" ] ; then  
     msg="`grep TFW-060 $logdir/$logfile`"  
   else  
     echo " "  
     echo "Logfile $logdir/$logfile not found. Please check if the command was exectued/existence of WORKDIR/disk space."  
     echo " "  
     exit  
   fi  
   
   if [ -n "$msg" ] ; then  
     echo " "  
     echo "ERROR - The following message was issued that is considered fatal"  
     echo "$msg"  
     echo "Please check the file system space"  
     rcode=5  
   fi  
   
   if [ $logfile = "log_verify_test_structures_$TESTMODE" ] ; then  
     echo " "  
     echo "Checking TSV logs....."  
     CheckTSVlog "$logdir/$logfile"  
   fi  
   
   if [ $rcode -gt 4 ] ; then  
     echo " "  
     echo "Errors occured in $step. Exiting. Please review (E) or (P) messages in log file: "  
     echo "$logdir/$logfile"  
     echo " "  
     exit  
   elif [ $rcode -lt 2 ] ; then  
     echo "$step completed successfully. Continuing.."  
   elif [ $rcode -lt 4 ] ; then  
     echo "$step completed with WARNINGs. Continuing. Please review (W) messages in log file: "  
     echo "$logdir/$logfile"  
     echo " "  
   elif [ $rcode -eq 4 ] ; then  
     echo "$step completed with SEVERE WARNINGs. Please review (W) SEVERE messages in log file: "  
     echo "$logdir/$logfile"  
     echo " "  
   fi  
 }  
